#!/bin/bash

versao() {
echo -e "\e[97mComunidade no Discord: \e[33mhttps://chat.whatsapp.com/LvqP8e7lNPn9Y3QMbbnhfB                    \e[97mVersão \e[32mv.2.2.6\e[0m"
}



######################################################### 
#
# DEFININDO VARIAVIES
#

amarelo="\e[33m"
verde="\e[32m"
branco="\e[97m"
bege="\e[93m"
vermelho="\e[91m"
reset="\e[0m"

arquivo="/root/dados_vps/dados_vps"

#
#
#
#########################################################
#
# FUNÇÕES DE NOMES, DIREITOS E OUTROS.
#

nome_instalador() {
    clear
    echo ""
    echo -e "$branco       ███████╗███████╗████████╗██╗   ██╗██████╗      ██████╗ ██████╗ ██╗ ██████╗ ███╗   ██╗\e[0m"
    echo -e "$branco       ██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗    ██╔═══██╗██╔══██╗██║██╔═══██╗████╗  ██║\e[0m"
    echo -e "$branco       ███████╗█████╗     ██║   ██║   ██║██████╔╝    ██║   ██║██████╔╝██║██║   ██║██╔██╗ ██║\e[0m"
    echo -e "$branco       ╚════██║██╔══╝     ██║   ██║   ██║██╔═══╝     ██║   ██║██╔══██╗██║██║   ██║██║╚██╗██║\e[0m"
    echo -e "$branco       ███████║███████╗   ██║   ╚██████╔╝██║         ╚██████╔╝██║  ██║██║╚██████╔╝██║ ╚████║\e[0m"
    echo -e "$branco       ╚══════╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝          ╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝\e[0m"
    echo -e "$branco                                                                                            \e[0m"
    echo -e "$branco                                        ██╗   ██╗  ██████╗                                  \e[0m"
    echo -e "$branco                                        ██║   ██║  ╚════██╗                                 \e[0m"
    echo -e "$branco                              █████╗    ██║   ██║   █████╔╝    █████╗                       \e[0m"
    echo -e "$branco                              ╚════╝    ╚██╗ ██╔╝  ██╔═══╝     ╚════╝                       \e[0m"
    echo -e "$branco                                         ╚████╔╝██╗███████╗                                 \e[0m"
    echo -e "$branco                                          ╚═══╝ ╚═╝╚══════╝                                 \e[0m"
    echo ""

}
nome_menu() {
    clear
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo -e "$branco                    ███╗   ███╗███████╗███╗   ██╗██╗   ██╗    ██████╗ ███████╗                \e[0m"
    echo -e "$branco                    ████╗ ████║██╔════╝████╗  ██║██║   ██║    ██╔══██╗██╔════╝                \e[0m"
    echo -e "$branco                    ██╔████╔██║█████╗  ██╔██╗ ██║██║   ██║    ██║  ██║█████╗                  \e[0m"
    echo -e "$branco                    ██║╚██╔╝██║██╔══╝  ██║╚██╗██║██║   ██║    ██║  ██║██╔══╝                  \e[0m"
    echo -e "$branco                    ██║ ╚═╝ ██║███████╗██║ ╚████║╚██████╔╝    ██████╔╝███████╗                \e[0m"
    echo -e "$branco                    ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝     ╚═════╝ ╚══════╝                \e[0m"
    echo -e "$branco                                                                                                \e[0m"
    echo -e "$branco  ███████╗███████╗██████╗ ██████╗  █████╗ ███╗   ███╗███████╗███╗   ██╗████████╗ █████╗ ███████╗\e[0m"
    echo -e "$branco  ██╔════╝██╔════╝██╔══██╗██╔══██╗██╔══██╗████╗ ████║██╔════╝████╗  ██║╚══██╔══╝██╔══██╗██╔════╝\e[0m"
    echo -e "$branco  █████╗  █████╗  ██████╔╝██████╔╝███████║██╔████╔██║█████╗  ██╔██╗ ██║   ██║   ███████║███████╗\e[0m"
    echo -e "$branco  ██╔══╝  ██╔══╝  ██╔══██╗██╔══██╗██╔══██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   ██╔══██║╚════██║\e[0m"
    echo -e "$branco  ██║     ███████╗██║  ██║██║  ██║██║  ██║██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   ██║  ██║███████║\e[0m"
    echo -e "$branco  ╚═╝     ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚══════╝\e[0m"
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    versao
    echo ""
}

direitos_instalador() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 =\e[0m"
    echo -e "$amarelo=  $branco Este auto instalador foi desenvolvido para auxiliar na instalação das principais aplicações $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco  disponiveis no mercado open source. Já deixo todos os créditos as desenvolvedores de cada  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco aplicação disponiveis aqui. Este Setup é licenciado sob a Licença MIT (MIT). Você pode usar,$amarelo  =\e[0m"
    echo -e "$amarelo=  $branco  copiar, modificar, integrar, publicar, distribuir e/ou vender cópias dos produtos finais,  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco   mas deve sempre declarar que OrionDesign (contato@oriondesign.art.br) é o autor original  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco           destes códigos e atribuir um link para https://oriondesign.art.br/setup           $amarelo  =\e[0m"
    echo -e "$amarelo=                                                                                                 =\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
    read -p "Ao digitar Y você aceita e concorda com as orientações passadas acima (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        clear
        echo "Que pena que você não concorda, então estarei encerrando o instalador. Até mais."
        sleep 2
        clear
        exit 1
    fi
}

preencha_as_info() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=                          $branco Preencha as informações solicitadas abaixo                            $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}

conferindo_as_info() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=                          $branco Verifique se os dados abaixos estão certos                            $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}

instalando_msg() {
  echo""
  echo -e "$amarelo===================================================================================================\e[0m"
  echo -e "$amarelo=                                                                                                 =\e[0m"
  echo -e "$amarelo=      $branco  ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗      █████╗ ███╗   ██╗██████╗  ██████╗   $amarelo      = \e[0m" 
  echo -e "$amarelo=      $branco  ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██╔══██╗████╗  ██║██╔══██╗██╔═══██╗  $amarelo      =\e[0m"
  echo -e "$amarelo=      $branco  ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ███████║██╔██╗ ██║██║  ██║██║   ██║  $amarelo      =\e[0m"
  echo -e "$amarelo=      $branco  ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██╔══██║██║╚██╗██║██║  ██║██║   ██║  $amarelo      =\e[0m"
  echo -e "$amarelo=      $branco  ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝  $amarelo      =\e[0m"
  echo -e "$amarelo=      $branco  ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝   $amarelo      =\e[0m"
  echo -e "$amarelo=                                                                                                 =\e[0m"
  echo -e "$amarelo===================================================================================================\e[0m"
  echo ""
  echo ""
}

erro_msg() {
   echo -e "$amarelo===================================================================================================\e[0m"
   echo -e "$amarelo=                                                                                                 =\e[0m"
   echo -e "$amarelo=                                 $branco███████╗██████╗ ██████╗  ██████╗                                $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco██╔════╝██╔══██╗██╔══██╗██╔═══██╗                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco█████╗  ██████╔╝██████╔╝██║   ██║                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco██╔══╝  ██╔══██╗██╔══██╗██║   ██║                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco███████╗██║  ██║██║  ██║╚██████╔╝                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝                                $amarelo=\e[0m"
   echo -e "$amarelo=                                                                                                 =\e[0m"
   echo -e "$amarelo===================================================================================================\e[0m"
}

instalado_msg() {
    clear
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo -e "$branco     ██╗      ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗      █████╗ ██████╗  ██████╗       ██╗\e[0m"
    echo -e "$branco     ╚██╗     ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██╔══██╗██╔══██╗██╔═══██╗     ██╔╝\e[0m"
    echo -e "$branco      ╚██╗    ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ███████║██║  ██║██║   ██║    ██╔╝ \e[0m"
    echo -e "$branco      ██╔╝    ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██╔══██║██║  ██║██║   ██║    ╚██╗ \e[0m"
    echo -e "$branco     ██╔╝     ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗██║  ██║██████╔╝╚██████╔╝     ╚██╗\e[0m"
    echo -e "$branco     ╚═╝      ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝  ╚═════╝       ╚═╝\e[0m"
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}

creditos_msg() {
    echo ""
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco  Gostaria de contribuir para continuarmos o desenvolvimento deste projeto?            $amarelo=\e[0m"
    echo -e "$amarelo=          $branco                    Você pode fazer uma doação via PIX:                                $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=                                      pix@oriondesign.art.br                                     $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco         Se precisar de ajuda/mentoria ou quiser deixar seu feedback                   $amarelo=\e[0m"
    echo -e "$amarelo=          $branco               Nossa comunidade:$amarelo https://discord.gg/ZvtmFtMt82                         $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco                    ou via WhatsApp (comunidade SetupOrion)                            $amarelo=\e[0m"
    echo -e "$amarelo=          $amarelo               https://chat.whatsapp.com/LvqP8e7lNPn9Y3QMbbnhfB                        $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}

guarde_os_dados_msg() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=                 $branco Guarde todos os dados abaixo para evitar futuros transtornos                   $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}
dados() {
    nome_servidor=$(grep "Nome do Servidor:" "$arquivo" | awk -F': ' '{print $2}')
    nome_rede_interna=$(grep "Rede interna:" "$arquivo" | awk -F': ' '{print $2}')
}
gerador_de_senha_traefik() {
  senha=$(docker run --rm httpd:2.4-alpine htpasswd -nbB admin '@OrionDesign_' | cut -d ":" -f 2 | sed 's/\$/\$\$/g') > /dev/null 2>&1
}

nome_traefik_e_portainer() {
    clear
    echo ""
    echo -e "$branco               ████████╗██████╗  █████╗ ███████╗███████╗██╗██╗  ██╗    ███████╗       \e[0m"
    echo -e "$branco               ╚══██╔══╝██╔══██╗██╔══██╗██╔════╝██╔════╝██║██║ ██╔╝    ██╔════╝       \e[0m"
    echo -e "$branco                  ██║   ██████╔╝███████║█████╗  █████╗  ██║█████╔╝     █████╗         \e[0m"
    echo -e "$branco                  ██║   ██╔══██╗██╔══██║██╔══╝  ██╔══╝  ██║██╔═██╗     ██╔══╝         \e[0m"
    echo -e "$branco                  ██║   ██║  ██║██║  ██║███████╗██║     ██║██║  ██╗    ███████╗       \e[0m"
    echo -e "$branco                  ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝    ╚══════╝       \e[0m"
    echo -e "$branco                                                                                      \e[0m"
    echo -e "$branco             ██████╗  ██████╗ ██████╗ ████████╗ █████╗ ██╗███╗   ██╗███████╗██████╗   \e[0m"
    echo -e "$branco             ██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔══██╗██║████╗  ██║██╔════╝██╔══██╗  \e[0m"
    echo -e "$branco             ██████╔╝██║   ██║██████╔╝   ██║   ███████║██║██╔██╗ ██║█████╗  ██████╔╝  \e[0m"
    echo -e "$branco             ██╔═══╝ ██║   ██║██╔══██╗   ██║   ██╔══██║██║██║╚██╗██║██╔══╝  ██╔══██╗  \e[0m"
    echo -e "$branco             ██║     ╚██████╔╝██║  ██║   ██║   ██║  ██║██║██║ ╚████║███████╗██║  ██║  \e[0m"
    echo -e "$branco             ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝  \e[0m"
    echo ""
    echo ""
}

nome_chatwoot(){
    clear
    echo ""
    echo -e "$branco               ██████╗██╗  ██╗ █████╗ ████████╗██╗    ██╗ ██████╗  ██████╗ ████████╗\e[0m"
    echo -e "$branco              ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██║    ██║██╔═══██╗██╔═══██╗╚══██╔══╝\e[0m"
    echo -e "$branco              ██║     ███████║███████║   ██║   ██║ █╗ ██║██║   ██║██║   ██║   ██║   \e[0m"
    echo -e "$branco              ██║     ██╔══██║██╔══██║   ██║   ██║███╗██║██║   ██║██║   ██║   ██║   \e[0m"
    echo -e "$branco              ╚██████╗██║  ██║██║  ██║   ██║   ╚███╔███╔╝╚██████╔╝╚██████╔╝   ██║   \e[0m"
    echo -e "$branco               ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚══╝╚══╝  ╚═════╝  ╚═════╝    ╚═╝   \e[0m"
    echo ""
    echo ""
}

nome_evolution() {
    clear
    echo ""
    echo -e "$branco ███████╗██╗   ██╗ ██████╗ ██╗     ██╗   ██╗████████╗██╗ ██████╗ ███╗   ██╗     █████╗ ██████╗ ██╗\e[0m"
    echo -e "$branco ██╔════╝██║   ██║██╔═══██╗██║     ██║   ██║╚══██╔══╝██║██╔═══██╗████╗  ██║    ██╔══██╗██╔══██╗██║\e[0m"
    echo -e "$branco █████╗  ██║   ██║██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██╔██╗ ██║    ███████║██████╔╝██║\e[0m"
    echo -e "$branco ██╔══╝  ╚██╗ ██╔╝██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██║╚██╗██║    ██╔══██║██╔═══╝ ██║\e[0m"
    echo -e "$branco ███████╗ ╚████╔╝ ╚██████╔╝███████╗╚██████╔╝   ██║   ██║╚██████╔╝██║ ╚████║    ██║  ██║██║     ██║\e[0m"
    echo -e "$branco ╚══════╝  ╚═══╝   ╚═════╝ ╚══════╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝     ╚═╝\e[0m"
    echo ""
    echo ""                                                                                        
}

nome_typebot() {
    clear
    echo ""
    echo -e "$branco                    ████████╗██╗   ██╗██████╗ ███████╗██████╗  ██████╗ ████████╗\e[0m"
    echo -e "$branco                    ╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝\e[0m"
    echo -e "$branco                       ██║    ╚████╔╝ ██████╔╝█████╗  ██████╔╝██║   ██║   ██║   \e[0m"
    echo -e "$branco                       ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  ██╔══██╗██║   ██║   ██║   \e[0m"
    echo -e "$branco                       ██║      ██║   ██║     ███████╗██████╔╝╚██████╔╝   ██║   \e[0m"
    echo -e "$branco                       ╚═╝      ╚═╝   ╚═╝     ╚══════╝╚═════╝  ╚═════╝    ╚═╝   \e[0m"
    echo ""
    echo ""                                                    
}

nome_minio() {
    clear
    echo ""
    echo -e "$branco                              ███╗   ███╗██╗███╗   ██╗██╗ ██████╗ \e[0m"
    echo -e "$branco                              ████╗ ████║██║████╗  ██║██║██╔═══██╗\e[0m"
    echo -e "$branco                              ██╔████╔██║██║██╔██╗ ██║██║██║   ██║\e[0m"
    echo -e "$branco                              ██║╚██╔╝██║██║██║╚██╗██║██║██║   ██║\e[0m"
    echo -e "$branco                              ██║ ╚═╝ ██║██║██║ ╚████║██║╚██████╔╝\e[0m"
    echo -e "$branco                              ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝ \e[0m"
    echo ""
    echo ""                                   
}

nome_n8n() {
    clear
    echo ""
    echo -e "$branco                            ███╗   ██╗ █████╗ ███╗   ██╗\e[0m"
    echo -e "$branco                            ████╗  ██║██╔══██╗████╗  ██║\e[0m"
    echo -e "$branco                            ██╔██╗ ██║╚█████╔╝██╔██╗ ██║\e[0m"
    echo -e "$branco                            ██║╚██╗██║██╔══██╗██║╚██╗██║\e[0m"
    echo -e "$branco                            ██║ ╚████║╚█████╔╝██║ ╚████║\e[0m"
    echo -e "$branco                            ╚═╝  ╚═══╝ ╚════╝ ╚═╝  ╚═══╝\e[0m"
    echo ""
    echo ""                     
}
nome_flowise() {
    clear
    echo ""
    echo -e "$branco                      ███████╗██╗      ██████╗ ██╗    ██╗██╗███████╗███████╗\e[0m"
    echo -e "$branco                      ██╔════╝██║     ██╔═══██╗██║    ██║██║██╔════╝██╔════╝\e[0m"
    echo -e "$branco                      █████╗  ██║     ██║   ██║██║ █╗ ██║██║███████╗█████╗  \e[0m"
    echo -e "$branco                      ██╔══╝  ██║     ██║   ██║██║███╗██║██║╚════██║██╔══╝  \e[0m"
    echo -e "$branco                      ██║     ███████╗╚██████╔╝╚███╔███╔╝██║███████║███████╗\e[0m"
    echo -e "$branco                      ╚═╝     ╚══════╝ ╚═════╝  ╚══╝╚══╝ ╚═╝╚══════╝╚══════╝\e[0m"
    echo ""
    echo ""
}

nome_pgAdmin_4() {
    clear
    echo ""
    echo -e "$branco               ██████╗  ██████╗  █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗    ██╗  ██╗\e[0m"
    echo -e "$branco               ██╔══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║██║████╗  ██║    ██║  ██║\e[0m"
    echo -e "$branco               ██████╔╝██║  ███╗███████║██║  ██║██╔████╔██║██║██╔██╗ ██║    ███████║\e[0m"
    echo -e "$branco               ██╔═══╝ ██║   ██║██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║    ╚════██║\e[0m"
    echo -e "$branco               ██║     ╚██████╔╝██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║         ██║\e[0m"
    echo -e "$branco               ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝         ╚═╝\e[0m"
    echo ""
    echo ""                                                                  
}

nome_nocobase() {
    clear
    echo ""
    echo -e "$branco               ███╗   ██╗ ██████╗  ██████╗ ██████╗ ██████╗  █████╗ ███████╗███████╗\e[0m"
    echo -e "$branco               ████╗  ██║██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝\e[0m"
    echo -e "$branco               ██╔██╗ ██║██║   ██║██║     ██║   ██║██████╔╝███████║███████╗█████╗  \e[0m"
    echo -e "$branco               ██║╚██╗██║██║   ██║██║     ██║   ██║██╔══██╗██╔══██║╚════██║██╔══╝  \e[0m"
    echo -e "$branco               ██║ ╚████║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║  ██║███████║███████╗\e[0m"
    echo -e "$branco               ╚═╝  ╚═══╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝\e[0m"
    echo ""
    echo ""                                                                 
}

nome_botpress() {
    clear
    echo ""
    echo -e "$branco              ██████╗  ██████╗ ████████╗██████╗ ██████╗ ███████╗███████╗███████╗\e[0m"
    echo -e "$branco              ██╔══██╗██╔═══██╗╚══██╔══╝██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝\e[0m"
    echo -e "$branco              ██████╔╝██║   ██║   ██║   ██████╔╝██████╔╝█████╗  ███████╗███████╗\e[0m"
    echo -e "$branco              ██╔══██╗██║   ██║   ██║   ██╔═══╝ ██╔══██╗██╔══╝  ╚════██║╚════██║\e[0m"
    echo -e "$branco              ██████╔╝╚██████╔╝   ██║   ██║     ██║  ██║███████╗███████║███████║\e[0m"
    echo -e "$branco              ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝\e[0m"
    echo ""
    echo ""                                                          
}

nome_trocar_logos() {
    clear
    echo ""
    echo -e "$branco████████╗██████╗  ██████╗  ██████╗ █████╗ ██████╗     ██╗      ██████╗  ██████╗  ██████╗ ███████╗\e[0m"
    echo -e "$branco╚══██╔══╝██╔══██╗██╔═══██╗██╔════╝██╔══██╗██╔══██╗    ██║     ██╔═══██╗██╔════╝ ██╔═══██╗██╔════╝\e[0m"
    echo -e "$branco   ██║   ██████╔╝██║   ██║██║     ███████║██████╔╝    ██║     ██║   ██║██║  ███╗██║   ██║███████╗\e[0m"
    echo -e "$branco   ██║   ██╔══██╗██║   ██║██║     ██╔══██║██╔══██╗    ██║     ██║   ██║██║   ██║██║   ██║╚════██║\e[0m"
    echo -e "$branco   ██║   ██║  ██║╚██████╔╝╚██████╗██║  ██║██║  ██║    ███████╗╚██████╔╝╚██████╔╝╚██████╔╝███████║\e[0m"
    echo -e "$branco   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝\e[0m"
    echo -e "$branco                                                                                                 \e[0m"
    echo -e "$branco   ██████╗  ██████╗      ██████╗██╗  ██╗ █████╗ ████████╗██╗    ██╗ ██████╗  ██████╗ ████████╗      \e[0m"
    echo -e "$branco   ██╔══██╗██╔═══██╗    ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██║    ██║██╔═══██╗██╔═══██╗╚══██╔══╝      \e[0m"
    echo -e "$branco   ██║  ██║██║   ██║    ██║     ███████║███████║   ██║   ██║ █╗ ██║██║   ██║██║   ██║   ██║         \e[0m"
    echo -e "$branco   ██║  ██║██║   ██║    ██║     ██╔══██║██╔══██║   ██║   ██║███╗██║██║   ██║██║   ██║   ██║         \e[0m"
    echo -e "$branco   ██████╔╝╚██████╔╝    ╚██████╗██║  ██║██║  ██║   ██║   ╚███╔███╔╝╚██████╔╝╚██████╔╝   ██║         \e[0m"
    echo -e "$branco   ╚═════╝  ╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚══╝╚══╝  ╚═════╝  ╚═════╝    ╚═╝         \e[0m"
    echo ""
    echo ""
}
nome_finalizado() {
    clear
    echo ""
    echo -e "$branco             ███████╗██╗███╗   ██╗ █████╗ ██╗     ██╗███████╗ █████╗ ██████╗  ██████╗ \e[0m"
    echo -e "$branco             ██╔════╝██║████╗  ██║██╔══██╗██║     ██║╚══███╔╝██╔══██╗██╔══██╗██╔═══██╗\e[0m"
    echo -e "$branco             █████╗  ██║██╔██╗ ██║███████║██║     ██║  ███╔╝ ███████║██║  ██║██║   ██║\e[0m"
    echo -e "$branco             ██╔══╝  ██║██║╚██╗██║██╔══██║██║     ██║ ███╔╝  ██╔══██║██║  ██║██║   ██║\e[0m"
    echo -e "$branco             ██║     ██║██║ ╚████║██║  ██║███████╗██║███████╗██║  ██║██████╔╝╚██████╔╝\e[0m"
    echo -e "$branco             ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═════╝  ╚═════╝ \e[0m"
    echo ""
    echo ""
}
nome_remover_stack() {
    clear
    echo ""
    echo -e "$branco                  ██████╗ ███████╗███╗   ███╗ ██████╗ ██╗   ██╗███████╗██████╗ \e[0m"
    echo -e "$branco                  ██╔══██╗██╔════╝████╗ ████║██╔═══██╗██║   ██║██╔════╝██╔══██╗\e[0m"
    echo -e "$branco                  ██████╔╝█████╗  ██╔████╔██║██║   ██║██║   ██║█████╗  ██████╔╝\e[0m"
    echo -e "$branco                  ██╔══██╗██╔══╝  ██║╚██╔╝██║██║   ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗\e[0m"
    echo -e "$branco                  ██║  ██║███████╗██║ ╚═╝ ██║╚██████╔╝ ╚████╔╝ ███████╗██║  ██║\e[0m"
    echo -e "$branco                  ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝   ╚═══╝  ╚══════╝╚═╝  ╚═╝\e[0m"
    echo -e "$branco                                                                               \e[0m"
    echo -e "$branco                           ███████╗████████╗ █████╗  ██████╗██╗  ██╗            \e[0m"
    echo -e "$branco                           ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██║ ██╔╝            \e[0m"
    echo -e "$branco                           ███████╗   ██║   ███████║██║     █████╔╝             \e[0m"
    echo -e "$branco                           ╚════██║   ██║   ██╔══██║██║     ██╔═██╗             \e[0m"
    echo -e "$branco                           ███████║   ██║   ██║  ██║╚██████╗██║  ██╗            \e[0m"
    echo -e "$branco                           ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝            \e[0m"
    echo ""
    echo ""                                                                                             
}

nome_baserow() {
    clear
    echo ""
    echo -e "$branco                      ██████╗  █████╗ ███████╗███████╗██████╗  ██████╗ ██╗    ██╗\e[0m"
    echo -e "$branco                      ██╔══██╗██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗██║    ██║\e[0m"
    echo -e "$branco                      ██████╔╝███████║███████╗█████╗  ██████╔╝██║   ██║██║ █╗ ██║\e[0m"
    echo -e "$branco                      ██╔══██╗██╔══██║╚════██║██╔══╝  ██╔══██╗██║   ██║██║███╗██║\e[0m"
    echo -e "$branco                      ██████╔╝██║  ██║███████║███████╗██║  ██║╚██████╔╝╚███╔███╔╝\e[0m"
    echo -e "$branco                      ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝  ╚══╝╚══╝ \e[0m"
    echo ""
    echo ""                                                          
}

nome_wordpress() {
    clear
    echo ""
    echo -e "$branco           ██╗    ██╗ ██████╗ ██████╗ ██████╗ ██████╗ ██████╗ ███████╗███████╗███████╗\e[0m"
    echo -e "$branco           ██║    ██║██╔═══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝\e[0m"
    echo -e "$branco           ██║ █╗ ██║██║   ██║██████╔╝██║  ██║██████╔╝██████╔╝█████╗  ███████╗███████╗\e[0m"
    echo -e "$branco           ██║███╗██║██║   ██║██╔══██╗██║  ██║██╔═══╝ ██╔══██╗██╔══╝  ╚════██║╚════██║\e[0m"
    echo -e "$branco           ╚███╔███╔╝╚██████╔╝██║  ██║██████╔╝██║     ██║  ██║███████╗███████║███████║\e[0m"
    echo -e "$branco            ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝\e[0m"
    echo ""
    echo ""
}

nome_mongodb() {
  clear
  echo ""
  echo -e "$branco               ███╗   ███╗ ██████╗ ███╗   ██╗ ██████╗  ██████╗     ██████╗ ██████╗ \e[0m"
  echo -e "$branco               ████╗ ████║██╔═══██╗████╗  ██║██╔════╝ ██╔═══██╗    ██╔══██╗██╔══██╗\e[0m"
  echo -e "$branco               ██╔████╔██║██║   ██║██╔██╗ ██║██║  ███╗██║   ██║    ██║  ██║██████╔╝\e[0m"
  echo -e "$branco               ██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║   ██║    ██║  ██║██╔══██╗\e[0m"
  echo -e "$branco               ██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝╚██████╔╝    ██████╔╝██████╔╝\e[0m"
  echo -e "$branco               ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝  ╚═════╝     ╚═════╝ ╚═════╝ \e[0m"
  echo ""
  echo ""                                                               
}

nome_rabbitmq() {
  clear
  echo ""
  echo -e "$branco               ██████╗  █████╗ ██████╗ ██████╗ ██╗████████╗    ███╗   ███╗ ██████╗ \e[0m"
  echo -e "$branco               ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝    ████╗ ████║██╔═══██╗\e[0m"
  echo -e "$branco               ██████╔╝███████║██████╔╝██████╔╝██║   ██║       ██╔████╔██║██║   ██║\e[0m"
  echo -e "$branco               ██╔══██╗██╔══██║██╔══██╗██╔══██╗██║   ██║       ██║╚██╔╝██║██║▄▄ ██║\e[0m"
  echo -e "$branco               ██║  ██║██║  ██║██████╔╝██████╔╝██║   ██║       ██║ ╚═╝ ██║╚██████╔╝\e[0m"
  echo -e "$branco               ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═════╝ ╚═╝   ╚═╝       ╚═╝     ╚═╝ ╚══▀▀═╝ \e[0m"
  echo ""
  echo ""                                                                 
}

nome_uptimekuma() {
  clear
  echo ""
  echo -e "$branco      ██╗   ██╗██████╗ ████████╗██╗███╗   ███╗███████╗    ██╗  ██╗██╗   ██╗███╗   ███╗ █████╗ \e[0m"
  echo -e "$branco      ██║   ██║██╔══██╗╚══██╔══╝██║████╗ ████║██╔════╝    ██║ ██╔╝██║   ██║████╗ ████║██╔══██╗\e[0m"
  echo -e "$branco      ██║   ██║██████╔╝   ██║   ██║██╔████╔██║█████╗      █████╔╝ ██║   ██║██╔████╔██║███████║\e[0m"
  echo -e "$branco      ██║   ██║██╔═══╝    ██║   ██║██║╚██╔╝██║██╔══╝      ██╔═██╗ ██║   ██║██║╚██╔╝██║██╔══██║\e[0m"
  echo -e "$branco      ╚██████╔╝██║        ██║   ██║██║ ╚═╝ ██║███████╗    ██║  ██╗╚██████╔╝██║ ╚═╝ ██║██║  ██║\e[0m"
  echo -e "$branco       ╚═════╝ ╚═╝        ╚═╝   ╚═╝╚═╝     ╚═╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝\e[0m"
  echo ""
  echo ""
}

nome_testeemail() {
  clear
  echo ""
  echo -e "$branco                     ████████╗███████╗███████╗████████╗███████╗    ██████╗ ███████╗\e[0m"
  echo -e "$branco                     ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔════╝    ██╔══██╗██╔════╝\e[0m"
  echo -e "$branco                        ██║   █████╗  ███████╗   ██║   █████╗      ██║  ██║█████╗  \e[0m"
  echo -e "$branco                        ██║   ██╔══╝  ╚════██║   ██║   ██╔══╝      ██║  ██║██╔══╝  \e[0m"
  echo -e "$branco                        ██║   ███████╗███████║   ██║   ███████╗    ██████╔╝███████╗\e[0m"
  echo -e "$branco                        ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚══════╝    ╚═════╝ ╚══════╝\e[0m"
  echo -e "$branco                                                                                   \e[0m"
  echo -e "$branco                                 ███████╗███╗   ███╗ █████╗ ██╗██╗                 \e[0m"
  echo -e "$branco                                 ██╔════╝████╗ ████║██╔══██╗██║██║                 \e[0m"
  echo -e "$branco                                 █████╗  ██╔████╔██║███████║██║██║                 \e[0m"
  echo -e "$branco                                 ██╔══╝  ██║╚██╔╝██║██╔══██║██║██║                 \e[0m"
  echo -e "$branco                                 ███████╗██║ ╚═╝ ██║██║  ██║██║███████╗            \e[0m"
  echo -e "$branco                                 ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚══════╝            \e[0m"
  echo ""
  echo ""                                                          
}

nome_testando() {
  clear
  echo ""
  echo -e "$branco               ████████╗███████╗███████╗████████╗ █████╗ ███╗   ██╗██████╗  ██████╗ \e[0m"
  echo -e "$branco               ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗\e[0m"
  echo -e "$branco                  ██║   █████╗  ███████╗   ██║   ███████║██╔██╗ ██║██║  ██║██║   ██║\e[0m"
  echo -e "$branco                  ██║   ██╔══╝  ╚════██║   ██║   ██╔══██║██║╚██╗██║██║  ██║██║   ██║\e[0m"
  echo -e "$branco                  ██║   ███████╗███████║   ██║   ██║  ██║██║ ╚████║██████╔╝╚██████╔╝\e[0m"
  echo -e "$branco                  ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝ \e[0m"
  echo ""
  echo ""
}

nome_calcom() {
  clear
  echo ""
  echo -e "$branco                       ██████╗ █████╗ ██╗         ██████╗ ██████╗ ███╗   ███╗\e[0m"
  echo -e "$branco                      ██╔════╝██╔══██╗██║        ██╔════╝██╔═══██╗████╗ ████║\e[0m"
  echo -e "$branco                      ██║     ███████║██║        ██║     ██║   ██║██╔████╔██║\e[0m"
  echo -e "$branco                      ██║     ██╔══██║██║        ██║     ██║   ██║██║╚██╔╝██║\e[0m"
  echo -e "$branco                      ╚██████╗██║  ██║███████╗██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\e[0m"
  echo -e "$branco                       ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\e[0m"
  echo ""
  echo ""
}

nome_mautic(){
    clear
    echo ""
    echo -e "$branco                         ███╗   ███╗ █████╗ ██╗   ██╗████████╗██╗ ██████╗\e[0m"
    echo -e "$branco                         ████╗ ████║██╔══██╗██║   ██║╚══██╔══╝██║██╔════╝\e[0m"
    echo -e "$branco                         ██╔████╔██║███████║██║   ██║   ██║   ██║██║     \e[0m"
    echo -e "$branco                         ██║╚██╔╝██║██╔══██║██║   ██║   ██║   ██║██║     \e[0m"
    echo -e "$branco                         ██║ ╚═╝ ██║██║  ██║╚██████╔╝   ██║   ██║╚██████╗\e[0m"
    echo -e "$branco                         ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝\e[0m"
    echo ""
    echo ""                                              
}
nome_qdrant(){
    clear
    echo ""
    echo -e "$branco                        ██████╗ ██████╗ ██████╗  █████╗ ███╗   ██╗████████╗\e[0m"
    echo -e "$branco                       ██╔═══██╗██╔══██╗██╔══██╗██╔══██╗████╗  ██║╚══██╔══╝\e[0m"
    echo -e "$branco                       ██║   ██║██║  ██║██████╔╝███████║██╔██╗ ██║   ██║   \e[0m"
    echo -e "$branco                       ██║▄▄ ██║██║  ██║██╔══██╗██╔══██║██║╚██╗██║   ██║   \e[0m"
    echo -e "$branco                       ╚██████╔╝██████╔╝██║  ██║██║  ██║██║ ╚████║   ██║   \e[0m"
    echo -e "$branco                        ╚══▀▀═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   \e[0m"
    echo ""
    echo ""
}

nome_appsmith(){
    clear
    echo ""
    echo -e "$branco                   █████╗ ██████╗ ██████╗ ███████╗███╗   ███╗██╗████████╗██╗  ██╗\e[0m"
    echo -e "$branco                  ██╔══██╗██╔══██╗██╔══██╗██╔════╝████╗ ████║██║╚══██╔══╝██║  ██║\e[0m"
    echo -e "$branco                  ███████║██████╔╝██████╔╝███████╗██╔████╔██║██║   ██║   ███████║\e[0m"
    echo -e "$branco                  ██╔══██║██╔═══╝ ██╔═══╝ ╚════██║██║╚██╔╝██║██║   ██║   ██╔══██║\e[0m"
    echo -e "$branco                  ██║  ██║██║     ██║     ███████║██║ ╚═╝ ██║██║   ██║   ██║  ██║\e[0m"
    echo -e "$branco                  ╚═╝  ╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝  ╚═╝\e[0m"
    echo ""
    echo ""
}
nome_woofedcrm(){
    clear
    echo ""
    echo -e "$branco        ██╗    ██╗ ██████╗  ██████╗ ███████╗███████╗██████╗      ██████╗██████╗ ███╗   ███╗\e[0m"
    echo -e "$branco        ██║    ██║██╔═══██╗██╔═══██╗██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔══██╗████╗ ████║\e[0m"
    echo -e "$branco        ██║ █╗ ██║██║   ██║██║   ██║█████╗  █████╗  ██║  ██║    ██║     ██████╔╝██╔████╔██║\e[0m"
    echo -e "$branco        ██║███╗██║██║   ██║██║   ██║██╔══╝  ██╔══╝  ██║  ██║    ██║     ██╔══██╗██║╚██╔╝██║\e[0m"
    echo -e "$branco        ╚███╔███╔╝╚██████╔╝╚██████╔╝██║     ███████╗██████╔╝    ╚██████╗██║  ██║██║ ╚═╝ ██║\e[0m"
    echo -e "$branco         ╚══╝╚══╝  ╚═════╝  ╚═════╝ ╚═╝     ╚══════╝╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝\e[0m"
    echo ""
    echo ""
}
nome_formbricks(){
    clear
    echo ""
    echo -e "$branco          ███████╗ ██████╗ ██████╗ ███╗   ███╗██████╗ ██████╗ ██╗ ██████╗██╗  ██╗███████╗\e[0m"
    echo -e "$branco          ██╔════╝██╔═══██╗██╔══██╗████╗ ████║██╔══██╗██╔══██╗██║██╔════╝██║ ██╔╝██╔════╝\e[0m"
    echo -e "$branco          █████╗  ██║   ██║██████╔╝██╔████╔██║██████╔╝██████╔╝██║██║     █████╔╝ ███████╗\e[0m"
    echo -e "$branco          ██╔══╝  ██║   ██║██╔══██╗██║╚██╔╝██║██╔══██╗██╔══██╗██║██║     ██╔═██╗ ╚════██║\e[0m"
    echo -e "$branco          ██║     ╚██████╔╝██║  ██║██║ ╚═╝ ██║██████╔╝██║  ██║██║╚██████╗██║  ██╗███████║\e[0m"
    echo -e "$branco          ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝\e[0m"
    echo ""
    echo ""
}                                                                              
verificar_container_postgres() {
    if docker ps -q --filter "name=postgres" | grep -q .; then
        return 0
    else
        return 1
    fi
}

verificar_container_mysql() {


    if docker ps -q --filter "name=mysql" | grep -q .; then
        return 0
    else
        return 1
    fi
}

pegar_senha_postgres() {
    while :; do
        if [ -f /root/postgres.yaml ]; then
            senha_postgres=$(grep "POSTGRES_PASSWORD" /root/postgres.yaml | awk -F '=' '{print $2}')
            break
        else
            sleep 5
        fi
    done
}

pegar_senha_mysql() {
    while :; do
        if [ -f /root/mysql.yaml ]; then
            senha_mysql_wordpress=$(grep "MYSQL_ROOT_PASSWORD" /root/mysql.yaml | awk -F '=' '{print $2}')

            senha_mysql=$(grep "MYSQL_ROOT_PASSWORD" /root/mysql.yaml | awk -F '=' '{print $2}')
            break
        else
            sleep 5
        fi
    done
}


verificar_container_redis() {
    if docker ps -q --filter "name=redis" | grep -q .; then
        return 0
    else
        return 1
    fi
}

pegar_link_s3() {
    url_s3=$(grep "MINIO_SERVER_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
}

verificar_container_minio() {
    if docker ps -q --filter "name=minio" | grep -q .; then
        return 0
    else
        return 1
    fi
}

pegar_senha_minio() {
    user_minio=$(grep "MINIO_ROOT_USER" /root/minio.yaml | awk -F '=' '{print $2}')
    senha_minio=$(grep "MINIO_ROOT_PASSWORD" /root/minio.yaml | awk -F '=' '{print $2}')
    url_minio=$(grep "MINIO_BROWSER_REDIRECT_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
    url_s3=$(grep "MINIO_SERVER_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
}

#########################################################
#
# CHAMANDO NOME DO INSTALADOR + DIREITOS DO INSTALADOR
#

nome_instalador
direitos_instalador

#
#
#
#########################################################
#
# FUNÇÕES COM INSTALAÇÃO DAS APLICAÇÕES
#

wait_for_postgres() {
    dados
    local container_name="postgres"

    echo ""
    while true; do
        CONTAINER_ID=$(docker ps -q --filter "name=.*$container_name.*")

        if [ -n "$CONTAINER_ID" ]; then
            echo ""
            break
        fi

        sleep 5
    done
}

menu_instalador(){

    echo -e "${amarelo}[0]${reset} - ${branco}Testar SMTP${reset}"
    echo -e "${amarelo}[1]${reset} - ${branco}Traefik & Portainer${reset}"
    echo -e "${amarelo}[2]${reset} - ${branco}Chatwoot${reset}"
    echo -e "${amarelo}[3]${reset} - ${branco}ChatwootARM(Oracle VPS)${reset}"
    echo -e "${amarelo}[4]${reset} - ${branco}Evolution API${reset}"
    echo -e "${amarelo}[5]${reset} - ${branco}Evolution APIARM(Oracle VPS)${reset}"
    echo -e "${amarelo}[6]${reset} - ${branco}MinIO${reset}"
    echo -e "${amarelo}[7]${reset} - ${branco}Typebot${reset}"
    echo -e "${amarelo}[8]${reset} - ${branco}N8N${reset}"
    echo -e "${amarelo}[9]${reset} - ${branco}Flowise${reset}"
    echo -e "${amarelo}[10]${reset} - ${branco}PgAdmin 4${reset}"
    echo -e "${amarelo}[11]${reset} - ${branco}Nocobase${reset}"
    echo -e "${amarelo}[12]${reset} - ${branco}Botpress${reset}"
    echo -e "${amarelo}[13]${reset} - ${branco}Wordpress${reset}"
    echo -e "${amarelo}[14]${reset} - ${branco}Baserow${reset}"
    echo -e "${amarelo}[15]${reset} - ${branco}MongoDB${reset}"
    echo -e "${amarelo}[16]${reset} - ${branco}RabbitMQ${reset}"
    echo -e "${amarelo}[17]${reset} - ${branco}Uptime Kuma${reset}"
    echo -e "${amarelo}[18]${reset} - ${branco}Cal.com${reset}"
    echo -e "${amarelo}[19]${reset} - ${branco}Mautic${reset}"
    echo -e "${amarelo}[20]${reset} - ${branco}Appsmith${reset}"
    echo -e "${amarelo}[21]${reset} - ${branco}Qdrant${reset}"
    echo -e "${amarelo}[22]${reset} - ${branco}Woofed CRM${reset}"
    echo -e "${amarelo}[23]${reset} - ${branco}Formbricks ${verde}[NOVO]${reset}"
    echo -e "${amarelo}[24]${reset} - ${branco}Trocar Logos Chatwoot ${vermelho}[DEFASADO]${reset}"
    echo -e "${amarelo}[25]${reset} - ${branco}REMOVER STACK${reset}"
    echo -e "${amarelo}[26]${reset} - ${branco}Sair do instalador${reset}"
    echo ""
}

ferramenta_traefik_e_portainer() {

clear
nome_traefik_e_portainer
preencha_as_info

while true; do
    echo -e "\e[97mPasso$amarelo 1/4\e[0m"
    echo -en "\e[33mDigite o Dominio para o Portainer (ex: portainer.oriondesign.art.br): \e[0m" && read -r url_portainer
    echo ""

    echo -e "\e[97mPasso$amarelo 2/4\e[0m"
    echo -en "\e[33mDigite um nome para seu servidor (ex: OrionDesign): \e[0m" && read -r nome_servidor
    echo ""
    
    echo -e "\e[97mPasso$amarelo 3/4\e[0m"
    echo -en "\e[33mDigite um nome para sua rede interna (ex: OrionNet): \e[0m" && read -r nome_rede_interna
    echo ""
    
    echo -e "\e[97mPasso$amarelo 4/4\e[0m"
    echo -en "\e[33mDigite um endereço de Email valido (ex: orion@oriondesign.art.br): \e[0m" && read -r email_ssl
    echo ""
    

    clear
    nome_traefik_e_portainer
    conferindo_as_info

    echo -e "\e[33mLink do Portainer:\e[97m $url_portainer\e[0m"
    echo ""
    echo -e "\e[33mNome do Servidor:\e[97m $nome_servidor\e[0m"
    echo ""
    echo -e "\e[33mRede interna:\e[97m $nome_rede_interna\e[0m"
    echo ""
    echo -e "\e[33mEmail para SSL:\e[97m $email_ssl\e[0m"
    echo ""
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_traefik_e_portainer
        preencha_as_info
    fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/6]\e[0m"
echo ""
sleep 3

#SALVANDO DADOS NA VPS
cd
cd
#mkdir dados_vps

#PR do Fabio => https://github.com/hipnologo
if [ ! -d "dados_vps" ]; then
    mkdir dados_vps
fi
#

cd dados_vps
cat > dados_vps << EOL
[DADOS DA VPS]

Estes dados foram preenchidos na hora que você foi instalar o Traefik e Portainer e
serão utilizados para realizar as instalações no do SetupOrion v.2

Nome do Servidor: $nome_servidor

Rede interna: $nome_rede_interna

Email para SSL: $email_ssl

Link do Portainer: $url_portainer

Obrigado por utilizar nosso AutoInstalador.
Caso esse conteudo foi util, não deixe de apoiar nosso projeto.

pix@oriondesign.art.br

Bebam água!
EOL

cd
cd

#PEGANDO DADOS DA VPS
dados

#AUTALIZANDO VPS
sudo apt-get update > /dev/null

sudo apt upgrade -y > /dev/null 2>&1

#DEFININDO TIMEZONE
sudo timedatectl set-timezone America/Sao_Paulo

sudo apt-get update > /dev/null

#MENSAGEM DE CONFIGURANDO A VPS (PASSOS)
echo -e "\e[97m• CONFIGURANDO A VPS \e[33m[2/6]\e[0m"
echo ""

#CONFIGURANDO VPS
hostnamectl set-hostname $nome_servidor > /dev/null

sudo sed -i "s/127.0.0.1[[:space:]]localhost/127.0.0.1 $nome_servidor/g" /etc/hosts > /dev/null 2>&1

sudo apt-get update > /dev/null

#INSTALANDO AS DEPENDENCIAS
sudo apt-get install -y apparmor-utils > /dev/null

#MENSAGEM DE INSTALANDO DOCKER (PASSOS)
echo -e "\e[97m• INSTALANDO DOCKER SWARN \e[33m[3/6]\e[0m"
echo ""

#TESTE SALVA O IP
ip=$(curl -s ifconfig.me)

#INSTALANDO DOCKER SWARM
curl -fsSL https://get.docker.com | bash > /dev/null 2>&1

#TESTE MANDA INICIAR
docker swarm init --advertise-addr $ip > /dev/null

#MENSAGEM DE CRIANDO REDE INTERNA (PASSOS)
echo -e "\e[97m• CRIANDO REDE INTERNA \e[33m[4/6]\e[0m"
echo ""


#CRIANDO REDE INTERNA
docker network create --driver=overlay $nome_rede_interna > /dev/null

#MENSAGEM DE INSTALANDO TRAEFIK (PASSOS)
echo -e "\e[97m• INSTALANDO TRAEFIK \e[33m[5/6]\e[0m"
echo ""

# CRIANDO ARQUIVO DO TRAEFIK

cat > traefik.yaml << EOL
version: "3.7"

services:

  traefik:
    image: traefik:latest
    command:
      - "--api.dashboard=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=$nome_rede_interna"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/etc/traefik/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.email=$email_ssl"
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access-log"
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
        - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
        - "traefik.http.routers.http-catchall.rule=Host(\`{host:.+}\`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-https@docker"
        - "traefik.http.routers.http-catchall.priority=1"
    volumes:
      - "vol_certificates:/etc/traefik/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - $nome_rede_interna

volumes:

  vol_shared:
    external: true
    name: volume_swarm_shared
  vol_certificates:
    external: true
    name: volume_swarm_certificates

networks:

  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO TREAFIK
docker stack deploy --prune --resolve-image always -c traefik.yaml traefik > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço trarik está ativo
    if docker service ls --filter "name=traefik" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#MENSAGEM DE INSTALANDO PORTAINER (PASSOS)
echo -e "\e[97m• INSTALANDO PORTAINER \e[33m[6/6]\e[0m"
echo ""

#GERANDO SENHA
#gerador_de_senha_traefik
#command: --admin-password '$senha'

#CRIANDO ARQUIVO DO PORTAINER
cat > portainer.yaml <<EOL
version: "3.7"

services:
  agent:
    image: portainer/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - $nome_rede_interna
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
    networks:
      - $nome_rede_interna
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(\`$url_portainer\`)"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.http.routers.portainer.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.portainer.service=portainer"
        - "traefik.docker.network=$nome_rede_interna"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.priority=1"

networks:
  $nome_rede_interna:
    external: true
    attachable: true
    name: $nome_rede_interna

volumes:
  portainer_data:
    external: true
    name: portainer_data
EOL

#SUBINDO STACK DO PORTAINER
docker stack deploy --prune --resolve-image always -c portainer.yaml portainer > /dev/null 2>&1

sleep 5

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço portainer está ativo
    if docker service ls --filter "name=portainer" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[PORTAINER]\e[0m"
echo ""
echo -e "\e[97mDominio:\e[33m https://$url_portainer\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_postgres() {
#PEGANDO DADOS DA VPS
dados

#GERANDO SENHA
senha_postgres=$(openssl rand -hex 16)

#CRIANDO ARQUIVO DO POSTGRES
cat > postgres.yaml <<EOL
version: "3.7"

services:
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_PASSWORD=$senha_postgres
    networks:
      - $nome_rede_interna
    #ports:
    #  - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M

volumes:
  postgres_data:
    external: true
    name: postgres_data

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO POSTGRES
docker stack deploy --prune --resolve-image always -c postgres.yaml postgres

sleep 10
}

criar_banco_postgres_chatwoot() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot"

            if [ $? -eq 0 ]; then
                echo "O banco de dados chatwoot já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS chatwoot;"
                    echo "Banco de dados chatwoot apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot;"
                    
                    echo "Banco de dados chatwoot criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados chatwoot criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_n8n_queue() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_queue"

            if [ $? -eq 0 ]; then
                echo "O banco de dados n8n_queue já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS n8n_queue;"
                    echo "Banco de dados n8n_queue apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_queue;"
                    
                    echo "Banco de dados n8n_queue criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_queue;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_queue"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados n8n_queue criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}


criar_banco_postgres_typebot() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "typebot"

            if [ $? -eq 0 ]; then
                echo "O banco de dados typebot já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS typebot;"
                    echo "Banco de dados typebot apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE typebot;"
                    
                    echo "Banco de dados typebot criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE typebot;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "typebot"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados typebot criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}


criar_banco_postgres_flowise() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "flowise"

            if [ $? -eq 0 ]; then
                echo "O banco de dados flowise já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS flowise;"
                    echo "Banco de dados flowise apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE flowise;"
                    
                    echo "Banco de dados flowise criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE flowise;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "flowise"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados flowise criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}


criar_banco_postgres_nocobase() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocobase"

            if [ $? -eq 0 ]; then
                echo "O banco de dados nocobase já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS nocobase;"
                    echo "Banco de dados nocobase apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocobase;"
                    
                    # Conceder privilégios ao usuário postgres
                    docker exec "$CONTAINER_ID" psql -U postgres -d nocobase -c "GRANT ALL PRIVILEGES ON DATABASE nocobase TO postgres;"
                    
                    echo "Banco de dados nocobase criado com sucesso e permissões concedidas."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocobase;"
                
                # Conceder privilégios ao usuário postgres
                docker exec "$CONTAINER_ID" psql -U postgres -d nocobase -c "GRANT ALL PRIVILEGES ON DATABASE nocobase TO postgres;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocobase"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados nocobase criado com sucesso e permissões concedidas."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_botpress() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "botpress"

            if [ $? -eq 0 ]; then
                echo "O banco de dados botpress já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS botpress;"
                    echo "Banco de dados botpress apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE botpress;"
                    
                    echo "Banco de dados botpress criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE botpress;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "botpress"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados botpress criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}


criar_banco_postgres_calcom() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "calcom"

            if [ $? -eq 0 ]; then
                echo "O banco de dados calcom já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS calcom;"
                    echo "Banco de dados calcom apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE calcom;"
                    
                    echo "Banco de dados calcom criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE calcom;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "calcom"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados calcom criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}
criar_banco_postgres_woofedcrm() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "woofedcrm"

            if [ $? -eq 0 ]; then
                echo "O banco de dados woofedcrm já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS woofedcrm;"
                    echo "Banco de dados woofedcrm apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE woofedcrm;"
                    
                    echo "Banco de dados woofedcrm criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE woofedcrm;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "woofedcrm"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados woofedcrm criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_formbricks() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "formbricks"

            if [ $? -eq 0 ]; then
                echo "O banco de dados formbricks já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS formbricks;"
                    echo "Banco de dados formbricks apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE formbricks;"
                    
                    echo "Banco de dados formbricks criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE formbricks;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "formbricks"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados formbricks criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

ferramenta_redis() {
#PEGANDO DADOS DA VPS
dados

#CRIANDO ARQUIVO DO REDIS
cat > redis.yaml <<EOL
version: "3.7"

services:
  redis:
    image: redis:latest
    command: [
        "redis-server",
        "--appendonly",
        "yes",
        "--port",
        "6379"
      ]
    volumes:
      - redis_data:/data
    networks:
      - $nome_rede_interna
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M

volumes:
  redis_data:
    external: true
    name: redis_data

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO REDIS
docker stack deploy --prune --resolve-image always -c redis.yaml redis

sleep 10
}

ferramenta_minio() {
clear
dados
nome_minio
preencha_as_info

while true; do
  
echo -e "\e[97mPasso$amarelo 1/4\e[0m"
echo -en "\e[33mDigite o Dominio para o MinIO (ex: minio.oriondesign.art.br): \e[0m" && read -r url_minio
echo ""

echo -e "\e[97mPasso$amarelo 2/4\e[0m"
echo -en "\e[33mDigite o Dominio para o Minio S3 (ex: s3.oriondesign.art.br): \e[0m" && read -r url_s3
echo ""

echo -e "\e[97mPasso$amarelo 3/4\e[0m"
echo -en "\e[33mDigite um usuario para o MinIO (Sem caracteres especiais: @\!#$): \e[0m" && read -r user_minio
echo ""

echo -e "\e[97mPasso$amarelo 4/4\e[0m"
echo -en "\e[33mDigite uma senha para o MinIO (Sem caracteres especiais: @\!#$): \e[0m" && read -r senha_minio
echo ""

clear
    nome_minio
    conferindo_as_info

    echo -e "\e[33mDominio do MinIO:\e[97m $url_minio\e[0m"
    echo ""

    echo -e "\e[33mDominio do S3:\e[97m $url_s3\e[0m"
    echo ""

    echo -e "\e[33mUsuario do MinIO:\e[97m $user_minio\e[0m"
    echo ""    

    echo -e "\e[33mSenha do MinIO:\e[97m $senha_minio\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_minio
        preencha_as_info
    fi
    done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/2]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO MINIO \e[33m[2/2]\e[0m"
echo ""

#CRIANDO ARQUIVO DO MINIO
cat > minio.yaml <<EOL
version: "3.7"

services:
  minio:
    image: quay.io/minio/minio:RELEASE.2024-01-13T07-53-03Z-cpuv1
    command: server /data --console-address ":9001"
    networks:
      - $nome_rede_interna
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=$user_minio
      - MINIO_ROOT_PASSWORD=$senha_minio
      - MINIO_BROWSER_REDIRECT_URL=https://$url_minio
      - MINIO_SERVER_URL=https://$url_s3
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.minio_public.rule=Host(\`$url_s3\`)
        - traefik.http.routers.minio_public.entrypoints=websecure
        - traefik.http.routers.minio_public.tls.certresolver=letsencryptresolver
        - traefik.http.services.minio_public.loadbalancer.server.port=9000
        - traefik.http.services.minio_public.loadbalancer.passHostHeader=true
        - traefik.http.routers.minio_public.service=minio_public
        - traefik.http.routers.minio_console.rule=Host(\`$url_minio\`)
        - traefik.http.routers.minio_console.entrypoints=websecure
        - traefik.http.routers.minio_console.tls.certresolver=letsencryptresolver
        - traefik.http.services.minio_console.loadbalancer.server.port=9001
        - traefik.http.services.minio_console.loadbalancer.passHostHeader=true
        - traefik.http.routers.minio_console.service=minio_console
volumes:
  minio_data:
    external: true
    name: minio_data

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO MINIO
docker stack deploy --prune --resolve-image always -c minio.yaml minio

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço minio está ativo
    if docker service ls --filter "name=minio" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[MinIO]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_minio\e[0m"
echo ""
echo -e "\e[33mUsuario:\e[97m $user_minio\e[0m"
echo ""    
echo -e "\e[33mSenha:\e[97m $senha_minio\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_mysql() {
dados
senha_mysql_wordpress=$(openssl rand -hex 16)

cat > mysql.yaml <<EOL
version: "3.7"

services:
  mysql:
    #image: mysql:latest
    image: percona/percona-server:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=$senha_mysql_wordpress
      - TZ=America/Sao_Paulo
    networks:
      - $nome_rede_interna
    volumes:
      - mysql_data:/var/lib/mysql
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 1024M
    command:
      [
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_general_ci",
        "--sql-mode=",
        "--default-authentication-plugin=mysql_native_password",
        "--max-allowed-packet=512MB",
      ]

volumes:
  mysql_data:
    external: true
    name: mysql_data

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

docker stack deploy --prune --resolve-image always -c mysql.yaml mysql #> /dev/null 2>&1

  #VERIFICANDO SERVIÇO MENSAGEM
  echo -e "\e[97m• VERIFICANDO SERVIÇO MYSQL\e[0m"
  echo ""
  while true; do
      # Verifica se o serviço mysql está ativo
      if docker service ls --filter "name=mysql" | grep "1/1"; then
          sleep 2
          break
      fi
      sleep 5
  done

sleep 15
}

criar_banco_mysql_mautic() {
    dados
    pegar_senha_mysql
    while :; do
        if CONTAINER_ID=$(docker ps -q --filter "name=mysql"); then
            if docker exec "$CONTAINER_ID" mysql -u root -p"$senha_mysql" -e "SHOW DATABASES LIKE 'mautic';" | grep -qw "mautic"; then
                echo "O banco de dados mautic já existe."

                resposta="N"
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    docker exec "$CONTAINER_ID" mysql -u root -p"$senha_mysql" -e "DROP DATABASE IF EXISTS mautic;"
                    echo "Banco de dados mautic apagado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                    break
                fi
            else
                docker exec "$CONTAINER_ID" mysql -u root -p"$senha_mysql" -e "CREATE DATABASE mautic;"
                echo "Banco de dados mautic criado com sucesso."
                break
            fi
        else
            sleep 5
        fi
    done
}


ferramenta_chatwootARM() {

    nome_chatwoot
    preencha_as_info
    dados
    
    while true; do

    echo -e "\e[97mPasso$amarelo 1/5\e[0m"
    echo -en "\e[33mDigite o Dominio para o Chatwoot (ex: app.oriondesign.art.br): \e[0m" && read -r url_chatwoot
    echo ""

    #echo -e "\e[97mPasso$amarelo 2/6$branco - Configurando Chatwoot\e[0m"
    #echo -en "\e[33mDigite o nome da sua Empresa (ex: OrionDesign): \e[0m" && read -r nome_empresa_chatwoot
    #echo ""
    nome_empresa_chatwoot="$nome_servidor"

    echo -e "\e[97mPasso$amarelo 2/5\e[0m"
    echo -en "\e[33mDigite o Email de Administrador (ex: contato@oriondesign.art.br): \e[0m" && read -r email_admin_chatwoot
    echo ""

    echo -e "\e[97mPasso$amarelo 3/5\e[0m"
    echo -en "\e[33mDigite a Senha SMTP do Email (Sem caracteres especiais: \!#$ | se estiver usando gmail use a senha de app): \e[0m" && read -r senha_email_chatwoot
    echo ""

    dominio_smtp_chatwoot=$(echo "$email_admin_chatwoot" | cut -d "@" -f 2)

    echo -e "\e[97mPasso$amarelo 4/5\e[0m"
    echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot
    echo ""

    echo -e "\e[97mPasso$amarelo 5/5\e[0m"
    echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot

    if [ "$porta_smtp_chatwoot" -eq 465 ]; then
     sobre_ssl=true
    else
     sobre_ssl=false
    fi
    
    clear
    nome_chatwoot
    conferindo_as_info

    echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mEmail de Administrador:\e[97m $email_admin_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mSenha do Email:\e[97m $senha_email_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m"
    echo ""
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_chatwoot
        preencha_as_info
    fi
    done



#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/4]\e[0m"
echo ""

    dados

    verificar_container_postgres
    if [ $? -eq 0 ]; then
        echo ""
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_chatwoot #> /dev/null 2>&1
    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_chatwoot #> /dev/null 2>&1
    fi

    verificar_container_redis
    if [ $? -eq 0 ]; then
        echo ""
    else
        ferramenta_redis > /dev/null 2>&1
    fi

#MENSAGEM DE INSTALANDO CHATWOOT (PASSOS)
echo -e "\e[97m• INSTALANDO CHATWOOT \e[33m[2/4]\e[0m"
echo ""

encryption_key=$(openssl rand -hex 16)

cat > chatwoot.yaml <<EOL
version: "3.7"

services:
  chatwoot_app:
    image: amoxt/chatwoot-arm:latest
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    entrypoint: docker/entrypoints/rails.sh
    volumes:
      - chatwoot_data:/app/storage
      - chatwoot_public_orion:/app/public 
    networks:
      - $nome_rede_interna
    environment:
      - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup
      - INSTALLATION_NAME=$nome_empresa_chatwoot
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=$encryption_key
      - FRONTEND_URL=https://$url_chatwoot
      - DEFAULT_LOCALE=pt_BR
      - FORCE_SSL=true
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=$senha_postgres
      - POSTGRES_DATABASE=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - USE_INBOX_AVATAR_FOR_BOT=true
      - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot>
      - SMTP_DOMAIN=$dominio_smtp_chatwoot
      - SMTP_ADDRESS=$smtp_email_chatwoot
      - SMTP_PORT=$porta_smtp_chatwoot
      - SMTP_SSL=$sobre_ssl
      - SMTP_USERNAME=$email_admin_chatwoot
      - SMTP_PASSWORD=$senha_email_chatwoot
      - SMTP_AUTHENTICATION=login
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SMTP_OPENSSL_VERIFY_MODE=peer
      - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.chatwoot_app.rule=Host(\`$url_chatwoot\`)
        - traefik.http.routers.chatwoot_app.entrypoints=websecure
        - traefik.http.routers.chatwoot_app.tls.certresolver=letsencryptresolver
        - traefik.http.routers.chatwoot_app.priority=1
        - traefik.http.routers.chatwoot_app.service=chatwoot_app
        - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000 
        - traefik.http.services.chatwoot_app.loadbalancer.passhostheader=true 
        - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.routers.chatwoot_app.middlewares=sslheader@docker

  chatwoot_sidekiq:
    image: amoxt/chatwoot-arm:latest
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - chatwoot_data:/app/storage
      - chatwoot_public_orion:/app/public
    networks:
      - $nome_rede_interna
    environment:
      - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup
      - INSTALLATION_NAME=$nome_empresa_chatwoot
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=$encryption_key
      - FRONTEND_URL=https://$url_chatwoot
      - DEFAULT_LOCALE=pt_BR
      - FORCE_SSL=true
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=$senha_postgres
      - POSTGRES_DATABASE=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - USE_INBOX_AVATAR_FOR_BOT=true
      - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot>
      - SMTP_DOMAIN=$dominio_smtp_chatwoot
      - SMTP_ADDRESS=$smtp_email_chatwoot
      - SMTP_PORT=$porta_smtp_chatwoot
      - SMTP_SSL=$sobre_ssl
      - SMTP_USERNAME=$email_admin_chatwoot
      - SMTP_PASSWORD=$senha_email_chatwoot
      - SMTP_AUTHENTICATION=login
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SMTP_OPENSSL_VERIFY_MODE=peer
      - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M

volumes:
  chatwoot_data:
    external: true
    name: chatwoot_data
  chatwoot_public_orion:
    external: true
    name: chatwoot_public_orion

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO CHATWOOT
docker stack deploy --prune --resolve-image always -c chatwoot.yaml chatwoot > /dev/null 2>&1

sleep 10
#MENSAGEM DE MIGRANDO BANCO DE DADOS (PASSOS)
echo -e "\e[97m• MIGRANDO BANCO DE DADOS \e[33m[3/4]\e[0m"
echo ""

#MIGRANDO BANCO DE DADOS DO CHATWOOT
container_name="chatwoot_chatwoot_app"

max_wait_time=1200

wait_interval=60

elapsed_time=0

while [ $elapsed_time -lt $max_wait_time ]; do
  CONTAINER_ID=$(docker ps -q --filter "name=$container_name")
  if [ -n "$CONTAINER_ID" ]; then
    break
  fi
  sleep $wait_interval
  elapsed_time=$((elapsed_time + wait_interval))
done

if [ -z "$CONTAINER_ID" ]; then
  echo "O contêiner não foi encontrado após $max_wait_time segundos."
  exit 1
fi

docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare

#MENSAGEM DE ATIVANDO FUNÇÕES DO SUPER ADMIN (PASSOS)
echo -e "\e[97m• ATIVANDO FUNÇÕES DO SUPER ADMIN \e[33m[4/4]\e[0m"
echo ""

#HABILITANDO FUNÇÕES DO SUPER ADMIN
wait_for_postgres

docker exec -i $CONTAINER_ID psql -U postgres <<EOF
\c chatwoot;
update installation_configs set locked = false;
\q
EOF

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=chatwoot" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[CHATWOOT]\e[0m"
echo ""
echo -e "\e[97mDominio:\e[33m https://$url_chatwoot\e[0m"
echo ""
echo -e "\e[97mEmail:\e[33m $email_admin_chatwoot\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_chatwoot() {

    nome_chatwoot
    preencha_as_info
    dados
    
    while true; do

    echo -e "\e[97mPasso$amarelo 1/5\e[0m"
    echo -en "\e[33mDigite o Dominio para o Chatwoot (ex: app.oriondesign.art.br): \e[0m" && read -r url_chatwoot
    echo ""

    #echo -e "\e[97mPasso$amarelo 2/6$branco - Configurando Chatwoot\e[0m"
    #echo -en "\e[33mDigite o nome da sua Empresa (ex: OrionDesign): \e[0m" && read -r nome_empresa_chatwoot
    #echo ""
    nome_empresa_chatwoot="$nome_servidor"

    echo -e "\e[97mPasso$amarelo 2/5\e[0m"
    echo -en "\e[33mDigite o Email de Administrador (ex: contato@oriondesign.art.br): \e[0m" && read -r email_admin_chatwoot
    echo ""

    echo -e "\e[97mPasso$amarelo 3/5\e[0m"
    echo -en "\e[33mDigite a Senha SMTP do Email (Sem caracteres especiais: \!#$ | se estiver usando gmail use a senha de app): \e[0m" && read -r senha_email_chatwoot
    echo ""

    dominio_smtp_chatwoot=$(echo "$email_admin_chatwoot" | cut -d "@" -f 2)

    echo -e "\e[97mPasso$amarelo 4/5\e[0m"
    echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot
    echo ""

    echo -e "\e[97mPasso$amarelo 5/5\e[0m"
    echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot

    if [ "$porta_smtp_chatwoot" -eq 465 ]; then
     sobre_ssl=true
    else
     sobre_ssl=false
    fi
    
    clear
    nome_chatwoot
    conferindo_as_info

    echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mEmail de Administrador:\e[97m $email_admin_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mSenha do Email:\e[97m $senha_email_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m"
    echo ""
    echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m"
    echo ""
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_chatwoot
        preencha_as_info
    fi
    done



#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/4]\e[0m"
echo ""

    dados

    verificar_container_postgres
    if [ $? -eq 0 ]; then
        echo ""
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_chatwoot #> /dev/null 2>&1
    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_chatwoot #> /dev/null 2>&1
    fi

    verificar_container_redis
    if [ $? -eq 0 ]; then
        echo ""
    else
        ferramenta_redis > /dev/null 2>&1
    fi

#MENSAGEM DE INSTALANDO CHATWOOT (PASSOS)
echo -e "\e[97m• INSTALANDO CHATWOOT \e[33m[2/4]\e[0m"
echo ""

encryption_key=$(openssl rand -hex 16)

cat > chatwoot.yaml <<EOL
version: "3.7"

services:
  chatwoot_app:
    image: chatwoot/chatwoot:latest
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    entrypoint: docker/entrypoints/rails.sh
    volumes:
      - chatwoot_data:/app/storage
      - chatwoot_public_orion:/app/public 
    networks:
      - $nome_rede_interna
    environment:
      - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup
      - INSTALLATION_NAME=$nome_empresa_chatwoot
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=$encryption_key
      - FRONTEND_URL=https://$url_chatwoot
      - DEFAULT_LOCALE=pt_BR
      - FORCE_SSL=true
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=$senha_postgres
      - POSTGRES_DATABASE=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - USE_INBOX_AVATAR_FOR_BOT=true
      - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot>
      - SMTP_DOMAIN=$dominio_smtp_chatwoot
      - SMTP_ADDRESS=$smtp_email_chatwoot
      - SMTP_PORT=$porta_smtp_chatwoot
      - SMTP_SSL=$sobre_ssl
      - SMTP_USERNAME=$email_admin_chatwoot
      - SMTP_PASSWORD=$senha_email_chatwoot
      - SMTP_AUTHENTICATION=login
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SMTP_OPENSSL_VERIFY_MODE=peer
      - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.chatwoot_app.rule=Host(\`$url_chatwoot\`)
        - traefik.http.routers.chatwoot_app.entrypoints=websecure
        - traefik.http.routers.chatwoot_app.tls.certresolver=letsencryptresolver
        - traefik.http.routers.chatwoot_app.priority=1
        - traefik.http.routers.chatwoot_app.service=chatwoot_app
        - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000 
        - traefik.http.services.chatwoot_app.loadbalancer.passhostheader=true 
        - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.routers.chatwoot_app.middlewares=sslheader@docker

  chatwoot_sidekiq:
    image: chatwoot/chatwoot:latest
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - chatwoot_data:/app/storage
      - chatwoot_public_orion:/app/public
    networks:
      - $nome_rede_interna
    environment:
      - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup
      - INSTALLATION_NAME=$nome_empresa_chatwoot
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=$encryption_key
      - FRONTEND_URL=https://$url_chatwoot
      - DEFAULT_LOCALE=pt_BR
      - FORCE_SSL=true
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=$senha_postgres
      - POSTGRES_DATABASE=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - USE_INBOX_AVATAR_FOR_BOT=true
      - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot>
      - SMTP_DOMAIN=$dominio_smtp_chatwoot
      - SMTP_ADDRESS=$smtp_email_chatwoot
      - SMTP_PORT=$porta_smtp_chatwoot
      - SMTP_SSL=$sobre_ssl
      - SMTP_USERNAME=$email_admin_chatwoot
      - SMTP_PASSWORD=$senha_email_chatwoot
      - SMTP_AUTHENTICATION=login
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SMTP_OPENSSL_VERIFY_MODE=peer
      - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M

volumes:
  chatwoot_data:
    external: true
    name: chatwoot_data
  chatwoot_public_orion:
    external: true
    name: chatwoot_public_orion

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO CHATWOOT
docker stack deploy --prune --resolve-image always -c chatwoot.yaml chatwoot > /dev/null 2>&1

sleep 10
#MENSAGEM DE MIGRANDO BANCO DE DADOS (PASSOS)
echo -e "\e[97m• MIGRANDO BANCO DE DADOS \e[33m[3/4]\e[0m"
echo ""

#MIGRANDO BANCO DE DADOS DO CHATWOOT
container_name="chatwoot_chatwoot_app"

max_wait_time=1200

wait_interval=60

elapsed_time=0

while [ $elapsed_time -lt $max_wait_time ]; do
  CONTAINER_ID=$(docker ps -q --filter "name=$container_name")
  if [ -n "$CONTAINER_ID" ]; then
    break
  fi
  sleep $wait_interval
  elapsed_time=$((elapsed_time + wait_interval))
done

if [ -z "$CONTAINER_ID" ]; then
  echo "O contêiner não foi encontrado após $max_wait_time segundos."
  exit 1
fi

docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare

#MENSAGEM DE ATIVANDO FUNÇÕES DO SUPER ADMIN (PASSOS)
echo -e "\e[97m• ATIVANDO FUNÇÕES DO SUPER ADMIN \e[33m[4/4]\e[0m"
echo ""

#HABILITANDO FUNÇÕES DO SUPER ADMIN
wait_for_postgres

docker exec -i $CONTAINER_ID psql -U postgres <<EOF
\c chatwoot;
update installation_configs set locked = false;
\q
EOF

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=chatwoot" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[CHATWOOT]\e[0m"
echo ""
echo -e "\e[97mDominio:\e[33m https://$url_chatwoot\e[0m"
echo ""
echo -e "\e[97mEmail:\e[33m $email_admin_chatwoot\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_evolutionARM() {
dados

clear
nome_evolution
preencha_as_info

while true; do

    echo -e "\e[97mPasso$amarelo 1/1\e[0m"
    echo -en "\e[33mDigite o Dominio para a Evolution API (ex: api.oriondesign.art.br): \e[0m" && read -r url_evolution
    echo ""
    
    clear
    nome_evolution
    conferindo_as_info

    echo -e "\e[33mDominio da Evolution API:\e[97m $url_evolution\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_evolution
        preencha_as_info
    fi
    done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO EVOLUTION API \e[33m[2/3]\e[0m"
echo ""

#CRIANDO ARQUIVO DA EVOLUTION API
apikeyglobal=$(openssl rand -hex 16)

cat > evolution.yaml <<EOL
version: "3.7"
services:
  evolution_oriondesign:
    image: jquerubim/evolution-api-arm:latest
    command: ["node", "./dist/src/main.js"]
    volumes:
    - evolution_oriondesign_instances:/evolution/instances
    - evolution_oriondesign_store:/evolution/store
    - evolution_oriondesign_views:/evolution/views
    networks:
      - $nome_rede_interna
    environment:
    - SERVER_URL=https://$url_evolution 
    - DOCKER_ENV=true
    - LOG_LEVEL=ERROR
    - DEL_INSTANCE=false
    - CONFIG_SESSION_PHONE_CLIENT=OrionDesign
    - CONFIG_SESSION_PHONE_NAME=chrome
    - STORE_MESSAGES=true
    - STORE_MESSAGE_UP=true
    - STORE_CONTACTS=true
    - STORE_CHATS=true
    - CLEAN_STORE_CLEANING_INTERVAL=7200 # seconds === 2h
    - CLEAN_STORE_MESSAGES=true
    - CLEAN_STORE_MESSAGE_UP=true
    - CLEAN_STORE_CONTACTS=true
    - CLEAN_STORE_CHATS=true
    - AUTHENTICATION_TYPE=apikey
    - AUTHENTICATION_API_KEY=$apikeyglobal
    - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
    - QRCODE_LIMIT=19021
    - WEBHOOK_GLOBAL_ENABLED=false
    - WEBHOOK_GLOBAL_URL=https://URL
    - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
    - WEBHOOK_EVENTS_APPLICATION_STARTUP=false
    - WEBHOOK_EVENTS_QRCODE_UPDATED=true
    - WEBHOOK_EVENTS_MESSAGES_SET=false
    - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
    - WEBHOOK_EVENTS_MESSAGES_UPDATE=true
    - WEBHOOK_EVENTS_CONTACTS_SET=true
    - WEBHOOK_EVENTS_CONTACTS_UPSERT=true
    - WEBHOOK_EVENTS_CONTACTS_UPDATE=true
    - WEBHOOK_EVENTS_PRESENCE_UPDATE=true
    - WEBHOOK_EVENTS_CHATS_SET=true
    - WEBHOOK_EVENTS_CHATS_UPSERT=true
    - WEBHOOK_EVENTS_CHATS_UPDATE=true
    - WEBHOOK_EVENTS_CHATS_DELETE=true
    - WEBHOOK_EVENTS_GROUPS_UPSERT=true
    - WEBHOOK_EVENTS_GROUPS_UPDATE=true
    - WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE=true
    - WEBHOOK_EVENTS_CONNECTION_UPDATE=true

    # Ativar o Redis
    - REDIS_ENABLED=false
    - REDIS_URI=redis://redis:6379

    # Ativer o RabbitMQ
    - RABBITMQ_ENABLED=false
    - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672

    # Aivar Banco de Dados MongoDB
    - DATABASE_ENABLED=false
    - DATABASE_CONNECTION_URI=mongodb://USUARIO:SENHA@IP_VPS:27017/?authSource=admin&readPreference=primary&ssl=false&directConnection=true
    - DATABASE_CONNECTION_DB_PREFIX_NAME=evolution
    - DATABASE_SAVE_DATA_INSTANCE=true
    - DATABASE_SAVE_DATA_NEW_MESSAGE=false
    - DATABASE_SAVE_MESSAGE_UPDATE=false
    - DATABASE_SAVE_DATA_CONTACTS=false
    - DATABASE_SAVE_DATA_CHATS=false

    # Novas variaveis para o Typebot
    - TYPEBOT_KEEP_OPEN=true
    - TYPEBOT_API_VERSION=latest

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      labels:
      - traefik.enable=1
      - traefik.http.routers.evolution_oriondesign.rule=Host(\`$url_evolution\`)
      - traefik.http.routers.evolution_oriondesign.entrypoints=websecure
      - traefik.http.routers.evolution_oriondesign.priority=1
      - traefik.http.routers.evolution_oriondesign.tls.certresolver=letsencryptresolver
      - traefik.http.routers.evolution_oriondesign.service=evolution_oriondesign
      - traefik.http.services.evolution_oriondesign.loadbalancer.server.port=8080
      - traefik.http.services.evolution_oriondesign.loadbalancer.passHostHeader=1
volumes:
  evolution_oriondesign_instances:
    external: true
    name: evolution_oriondesign_instances
  evolution_oriondesign_store:
    external: true
    name: evolution_oriondesign_store
  evolution_oriondesign_views:
    external: true
    name: evolution_oriondesign_views
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true
EOL

#SUBINDO STACK DA EVOLUTION API

docker stack deploy --prune --resolve-image always -c evolution.yaml evolution > /dev/null 2>&1

sleep 10
#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSERINDO MANAGER NA API \e[33m[3/3]\e[0m"
echo ""

# INSERINDO O MANAGER NA EVOLUTION
while true
do
   
    if [ -f "/var/lib/docker/volumes/evolution_oriondesign_views/_data/manager.hbs" ]
    then
        
        sed -i 's|https://manager.evolution-api.com|https://app.appsmith.com/app/manager-setuporion-2-0/home-655e972229a1f6089b6ee327?embed=true|' /var/lib/docker/volumes/evolution_oriondesign_views/_data/manager.hbs 
        
        #docker stack deploy --prune --resolve-image always -c evolution.yaml evolution 
        docker stack deploy --resolve-image always --prune --force -c evolution.yaml evolution > /dev/null 2>&1
  
        break
    else
        sleep 5
    fi
done

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço evolution está ativo
    if docker service ls --filter "name=evolution" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Evolution API]\e[0m"
echo ""
echo -e "\e[97mLink do Manager:\e[33m https://$url_evolution/manager\e[0m"
echo ""
echo -e "\e[97mAPI URL:\e[33m https://$url_evolution\e[0m"
echo ""
echo -e "\e[97mGLOBAL API KEY:\e[33m $apikeyglobal\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_evolution() {
dados

clear
nome_evolution
preencha_as_info

while true; do

    echo -e "\e[97mPasso$amarelo 1/1\e[0m"
    echo -en "\e[33mDigite o Dominio para a Evolution API (ex: api.oriondesign.art.br): \e[0m" && read -r url_evolution
    echo ""
    
    clear
    nome_evolution
    conferindo_as_info

    echo -e "\e[33mDominio da Evolution API:\e[97m $url_evolution\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_evolution
        preencha_as_info
    fi
    done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO EVOLUTION API \e[33m[2/3]\e[0m"
echo ""

#CRIANDO ARQUIVO DA EVOLUTION API
apikeyglobal=$(openssl rand -hex 16)

cat > evolution.yaml <<EOL
version: "3.7"
services:
  evolution_oriondesign:
    image: atendai/evolution-api:latest
    command: ["node", "./dist/src/main.js"]
    volumes:
    - evolution_oriondesign_instances:/evolution/instances
    - evolution_oriondesign_store:/evolution/store
    - evolution_oriondesign_views:/evolution/views
    networks:
      - $nome_rede_interna
    environment:
    - SERVER_URL=https://$url_evolution 
    - DOCKER_ENV=true
    - LOG_LEVEL=ERROR
    - DEL_INSTANCE=false
    - CONFIG_SESSION_PHONE_CLIENT=OrionDesign
    - CONFIG_SESSION_PHONE_NAME=chrome
    - STORE_MESSAGES=true
    - STORE_MESSAGE_UP=true
    - STORE_CONTACTS=true
    - STORE_CHATS=true
    - CLEAN_STORE_CLEANING_INTERVAL=7200 # seconds === 2h
    - CLEAN_STORE_MESSAGES=true
    - CLEAN_STORE_MESSAGE_UP=true
    - CLEAN_STORE_CONTACTS=true
    - CLEAN_STORE_CHATS=true
    - AUTHENTICATION_TYPE=apikey
    - AUTHENTICATION_API_KEY=$apikeyglobal
    - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
    - QRCODE_LIMIT=19021
    - WEBHOOK_GLOBAL_ENABLED=false
    - WEBHOOK_GLOBAL_URL=https://URL
    - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
    - WEBHOOK_EVENTS_APPLICATION_STARTUP=false
    - WEBHOOK_EVENTS_QRCODE_UPDATED=true
    - WEBHOOK_EVENTS_MESSAGES_SET=false
    - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
    - WEBHOOK_EVENTS_MESSAGES_UPDATE=true
    - WEBHOOK_EVENTS_CONTACTS_SET=true
    - WEBHOOK_EVENTS_CONTACTS_UPSERT=true
    - WEBHOOK_EVENTS_CONTACTS_UPDATE=true
    - WEBHOOK_EVENTS_PRESENCE_UPDATE=true
    - WEBHOOK_EVENTS_CHATS_SET=true
    - WEBHOOK_EVENTS_CHATS_UPSERT=true
    - WEBHOOK_EVENTS_CHATS_UPDATE=true
    - WEBHOOK_EVENTS_CHATS_DELETE=true
    - WEBHOOK_EVENTS_GROUPS_UPSERT=true
    - WEBHOOK_EVENTS_GROUPS_UPDATE=true
    - WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE=true
    - WEBHOOK_EVENTS_CONNECTION_UPDATE=true

    # Ativar o Redis
    - REDIS_ENABLED=false
    - REDIS_URI=redis://redis:6379

    # Ativer o RabbitMQ
    - RABBITMQ_ENABLED=false
    - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672

    # Aivar Banco de Dados MongoDB
    - DATABASE_ENABLED=false
    - DATABASE_CONNECTION_URI=mongodb://USUARIO:SENHA@IP_VPS:27017/?authSource=admin&readPreference=primary&ssl=false&directConnection=true
    - DATABASE_CONNECTION_DB_PREFIX_NAME=evolution
    - DATABASE_SAVE_DATA_INSTANCE=true
    - DATABASE_SAVE_DATA_NEW_MESSAGE=false
    - DATABASE_SAVE_MESSAGE_UPDATE=false
    - DATABASE_SAVE_DATA_CONTACTS=false
    - DATABASE_SAVE_DATA_CHATS=false

    # Novas variaveis para o Typebot
    - TYPEBOT_KEEP_OPEN=true
    - TYPEBOT_API_VERSION=latest

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      labels:
      - traefik.enable=1
      - traefik.http.routers.evolution_oriondesign.rule=Host(\`$url_evolution\`)
      - traefik.http.routers.evolution_oriondesign.entrypoints=websecure
      - traefik.http.routers.evolution_oriondesign.priority=1
      - traefik.http.routers.evolution_oriondesign.tls.certresolver=letsencryptresolver
      - traefik.http.routers.evolution_oriondesign.service=evolution_oriondesign
      - traefik.http.services.evolution_oriondesign.loadbalancer.server.port=8080
      - traefik.http.services.evolution_oriondesign.loadbalancer.passHostHeader=1
volumes:
  evolution_oriondesign_instances:
    external: true
    name: evolution_oriondesign_instances
  evolution_oriondesign_store:
    external: true
    name: evolution_oriondesign_store
  evolution_oriondesign_views:
    external: true
    name: evolution_oriondesign_views
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true
EOL

#SUBINDO STACK DA EVOLUTION API

docker stack deploy --prune --resolve-image always -c evolution.yaml evolution > /dev/null 2>&1

sleep 10
#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSERINDO MANAGER NA API \e[33m[3/3]\e[0m"
echo ""

# INSERINDO O MANAGER NA EVOLUTION
while true
do
   
    if [ -f "/var/lib/docker/volumes/evolution_oriondesign_views/_data/manager.hbs" ]
    then
        
        sed -i 's|https://manager.evolution-api.com|https://app.appsmith.com/app/manager-setuporion-2-0/home-655e972229a1f6089b6ee327?embed=true|' /var/lib/docker/volumes/evolution_oriondesign_views/_data/manager.hbs 
        
        #docker stack deploy --prune --resolve-image always -c evolution.yaml evolution 
        docker stack deploy --resolve-image always --prune --force -c evolution.yaml evolution > /dev/null 2>&1
  
        break
    else
        sleep 5
    fi
done

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço evolution está ativo
    if docker service ls --filter "name=evolution" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Evolution API]\e[0m"
echo ""
echo -e "\e[97mLink do Manager:\e[33m https://$url_evolution/manager\e[0m"
echo ""
echo -e "\e[97mAPI URL:\e[33m https://$url_evolution\e[0m"
echo ""
echo -e "\e[97mGLOBAL API KEY:\e[33m $apikeyglobal\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_typebot() {
clear
dados
nome_typebot
preencha_as_info

#Verificando MINIO
verificar_container_minio
if [ $? -eq 0 ]; then
        echo ""
        pegar_senha_minio > /dev/null 2>&1
    else
        echo "Observação, é necessario instalar o MINIO antes de continuar a instalarção do Typebot"
        echo "Encerrando o instalador em 5 segundos"
        sleep 5
        exit
fi

while true; do

    echo -e "\e[97mPasso$amarelo 1/9\e[0m"
    echo -en "\e[33mDigite o Dominio para o Builder do Typebot (ex: typebot.oriondesign.art.br): \e[0m" && read -r url_typebot
    echo ""

    echo -e "\e[97mPasso$amarelo 2/9\e[0m"
    echo -en "\e[33mDigite o Dominio para o Viewer do Typebot (ex: bot.oriondesign.art.br): \e[0m" && read -r url_viewer
    echo ""

    echo -e "\e[97mPasso$amarelo 3/9\e[0m"
    echo -en "\e[33mDigite a versão que deseja do Typebot (ex: 2.21.3 ou latest): \e[0m" && read -r versao_typebot
    echo ""

    echo -e "\e[97mPasso$amarelo 4/9\e[0m"
    echo -en "\e[33mDigite o Email de admin: (ex: contato@oriondesign.art.br): \e[0m" && read -r email_typebot
    echo ""
    
    echo -e "\e[97mPasso$amarelo 5/9\e[0m"
    echo -en "\e[33mDigite a Senha SMTP do email (Sem caracteres especiais: \!#$ | se estiver usando gmail use a senha de app): \e[0m" && read -r senha_email_typebot
    echo ""

    echo -e "\e[97mPasso$amarelo 6/9\e[0m"
    echo -en "\e[33mDigite o HOST SMTP do email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_typebot
    echo ""

    echo -e "\e[97mPasso$amarelo 7/9\e[0m"
    echo -en "\e[33mDigite a Porta SMTP do email: \e[0m" && read -r porta_smtp_typebot
    echo ""

    echo -e "\e[97mPasso$amarelo 8/9\e[0m"
    echo -en "\e[33mAccess Key Minio: \e[0m" && read -r S3_ACCESS_KEY
    echo ""

    echo -e "\e[97mPasso$amarelo 9/9\e[0m"
    echo -en "\e[33mSecret Key Minio: \e[0m" && read -r S3_SECRET_KEY
    echo ""

    if [ "$porta_smtp_typebot" -eq 465 ]; then
    smtp_secure_typebot=true
    else
    smtp_secure_typebot=false
    fi
    
    clear
    nome_typebot
    conferindo_as_info

    echo -e "\e[33mDominio do Typebot Builder:\e[97m $url_typebot\e[0m"
    echo ""

    echo -e "\e[33mDominio do Typebot Viewer:\e[97m $url_viewer\e[0m"
    echo ""

    echo -e "\e[33mVersão do Typebot:\e[97m $versao_typebot\e[0m"
    echo ""    

    echo -e "\e[33mEmail de Admin:\e[97m $email_typebot\e[0m"
    echo ""

    echo -e "\e[33mSenha do Email:\e[97m $senha_email_typebot\e[0m"
    echo ""

    echo -e "\e[33mHost SMTP do Email:\e[97m $smtp_email_typebot\e[0m"
    echo ""

    echo -e "\e[33mPorta SMTP do Email:\e[97m $porta_smtp_typebot\e[0m"
    echo ""

    echo -e "\e[33mSecure SMTP do Email:\e[97m $smtp_secure_typebot\e[0m"
    echo ""

    echo -e "\e[33mAccess Key Minio:\e[97m $S3_ACCESS_KEY\e[0m"
    echo ""

    echo -e "\e[33mSecret Key Minio:\e[97m $S3_SECRET_KEY\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_typebot
        preencha_as_info
    fi
    done

#VERIFICAR POSTGRES

echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""

echo -e "\e[97m• VERIFICANDO E/OU INSTALANDO POSTGRES \e[33m[2/3]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        echo ""
        criar_banco_postgres_typebot #> /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_typebot #> /dev/null 2>&1
fi

pegar_senha_minio
pegar_link_s3

echo -e "\e[97m• INSTALANDO TYPEBOT \e[33m[3/3]\e[0m"
echo ""

#CRIANDO ARQUIVO DO BUILDER DO TYPEBOT
key_typebot=$(openssl rand -hex 16)

cat > typebot.yaml <<EOL
version: "3.7"

services:
  typebot_builder:
    image: baptistearno/typebot-builder:$versao_typebot
    networks:
      - $nome_rede_interna
    environment:
      - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/typebot
      - ENCRYPTION_SECRET=2652c632beb3f7c3fa800ce3eb022ce4
      - DEFAULT_WORKSPACE_PLAN=UNLIMITED
      - NEXTAUTH_URL=https://$url_typebot
      - NEXT_PUBLIC_VIEWER_URL=https://$url_viewer
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      - DISABLE_SIGNUP=false
      - ADMIN_EMAIL=$email_typebot
      - NEXT_PUBLIC_SMTP_FROM='Suporte' <$email_typebot>
      - SMTP_AUTH_DISABLED=false
      - SMTP_USERNAME=$email_typebot
      - SMTP_PASSWORD=$senha_email_typebot
      - SMTP_HOST=$smtp_email_typebot
      - SMTP_PORT=$porta_smtp_typebot
      - SMTP_SECURE=$smtp_secure_typebot

      ### Google Cloud ###
      #
      #- GOOGLE_CLIENT_ID=
      #- GOOGLE_CLIENT_SECRET=
      #
      ####################

      - S3_ACCESS_KEY=$S3_ACCESS_KEY
      - S3_SECRET_KEY=$S3_SECRET_KEY
      - S3_BUCKET=typebot
      - S3_ENDPOINT=$url_s3
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - io.portainer.accesscontrol.users=admin
        - traefik.enable=true
        - traefik.http.routers.typebot_builder.rule=Host(\`$url_typebot\`)
        - traefik.http.routers.typebot_builder.entrypoints=websecure
        - traefik.http.routers.typebot_builder.tls.certresolver=letsencryptresolver
        - traefik.http.services.typebot_builder.loadbalancer.server.port=3000
        - traefik.http.services.typebot_builder.loadbalancer.passHostHeader=true
        - traefik.http.routers.typebot_builder.service=typebot_builder

################################################################################

  typebot_viewer:
    image: baptistearno/typebot-viewer:$versao_typebot
    networks:
      - $nome_rede_interna
    environment:
      - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/typebot
      - ENCRYPTION_SECRET=2652c632beb3f7c3fa800ce3eb022ce4
      - DEFAULT_WORKSPACE_PLAN=UNLIMITED
      - NEXTAUTH_URL=https://$url_typebot
      - NEXT_PUBLIC_VIEWER_URL=https://$url_viewer
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      - DISABLE_SIGNUP=false
      - ADMIN_EMAIL=$email_typebot
      - NEXT_PUBLIC_SMTP_FROM='Suporte' <$email_typebot>
      - SMTP_AUTH_DISABLED=false
      - SMTP_USERNAME=$email_typebot
      - SMTP_PASSWORD=$senha_email_typebot
      - SMTP_HOST=$smtp_email_typebot
      - SMTP_PORT=$porta_smtp_typebot
      - SMTP_SECURE=$smtp_secure_typebot

      ### Google Cloud ###
      #
      #- GOOGLE_CLIENT_ID=
      #- GOOGLE_CLIENT_SECRET=
      #
      ####################

      - S3_ACCESS_KEY=$S3_ACCESS_KEY
      - S3_SECRET_KEY=$S3_SECRET_KEY
      - S3_BUCKET=typebot
      - S3_ENDPOINT=$url_s3
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - io.portainer.accesscontrol.users=admin
        - traefik.enable=true
        - traefik.http.routers.typebot_viewer.rule=Host(\`$url_viewer\`)
        - traefik.http.routers.typebot_viewer.entrypoints=websecure
        - traefik.http.routers.typebot_viewer.tls.certresolver=letsencryptresolver
        - traefik.http.services.typebot_viewer.loadbalancer.server.port=3000
        - traefik.http.services.typebot_viewer.loadbalancer.passHostHeader=true
        - traefik.http.routers.typebot_viewer.service=typebot_viewer

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna

EOL

#SUBINDO STACK DO TYPEBOT
docker stack deploy --prune --resolve-image always -c typebot.yaml typebot > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço typebot está ativo
    if docker service ls --filter "name=typebot" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Typebot]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_typebot\e[0m"
echo ""
echo -e "\e[33mEmail:\e[97m $email_typebot\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_n8n() {
dados
clear
nome_n8n
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/2\e[0m"
echo -en "\e[33mDigite o dominio para o N8N (ex: n8n.oriondesign.art.br): \e[0m" && read -r url_editorn8n
echo ""

echo -e "\e[97mPasso$amarelo 2/2\e[0m"
echo -en "\e[33mDigite o dominio para o Webhook do N8N (ex: webhookn8n.oriondesign.art.br): \e[0m" && read -r url_webhookn8n
echo ""
    
clear
nome_n8n
conferindo_as_info

echo -e "\e[33mDominio do N8N\e[97m $url_editorn8n\e[0m"
echo ""

echo -e "\e[33mDominio do Webhook do N8N:\e[97m $url_webhookn8n\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_n8n
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/3]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_n8n_queue #> /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_n8n_queue #> /dev/null 2>&1
fi
verificar_container_redis
    if [ $? -eq 0 ]; then
        sleep 1
    else
        ferramenta_redis > /dev/null 2>&1
    fi

echo -e "\e[97m• INSTALANDO N8N \e[33m[3/3]\e[0m"
echo ""
sleep 3

#CRIANDO ARQUIVO DO N8N
encryption_key=$(openssl rand -hex 16)

cat > n8n.yaml <<EOL
version: "3.7"

services:
  n8n_editor:
    image: n8nio/n8n:latest
    command: start
    networks:
      - $nome_rede_interna
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n_queue
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=$senha_postgres
      - N8N_ENCRYPTION_KEY=$encryption_key
      - N8N_HOST=$url_editorn8n
      - N8N_EDITOR_BASE_URL=https://$url_editorn8n/
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://$url_webhookn8n/
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=2
      - NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash,moment-with-locales
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n_editor.rule=Host(\`$url_editorn8n\`)
        - traefik.http.routers.n8n_editor.entrypoints=websecure
        - traefik.http.routers.n8n_editor.priority=1
        - traefik.http.routers.n8n_editor.tls.certresolver=letsencryptresolver
        - traefik.http.routers.n8n_editor.service=n8n_editor
        - traefik.http.services.n8n_editor.loadbalancer.server.port=5678
        - traefik.http.services.n8n_editor.loadbalancer.passHostHeader=1

  n8n_webhook:
    image: n8nio/n8n:latest
    command: webhook
    networks:
      - $nome_rede_interna
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n_queue
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=$senha_postgres
      - N8N_ENCRYPTION_KEY=$encryption_key
      - N8N_HOST=$url_editorn8n
      - N8N_EDITOR_BASE_URL=https://$url_editorn8n/
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://$url_webhookn8n/
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=2
      - NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash,moment-with-locales
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n_webhook.rule=(Host(\`$url_webhookn8n\`))
        - traefik.http.routers.n8n_webhook.entrypoints=websecure
        - traefik.http.routers.n8n_webhook.priority=1
        - traefik.http.routers.n8n_webhook.tls.certresolver=letsencryptresolver
        - traefik.http.routers.n8n_webhook.service=n8n_webhook
        - traefik.http.services.n8n_webhook.loadbalancer.server.port=5678
        - traefik.http.services.n8n_webhook.loadbalancer.passHostHeader=1

  n8n_worker:
    image: n8nio/n8n:latest
    command: worker --concurrency=10
    networks:
      - $nome_rede_interna
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n_queue
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=$senha_postgres
      - N8N_ENCRYPTION_KEY=$encryption_key
      - N8N_HOST=$url_editorn8n
      - N8N_EDITOR_BASE_URL=https://$url_editorn8n/
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://$url_webhookn8n/
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=2
      - NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash,moment-with-locales
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true
EOL

#SUBINDO STACK DO N8N
docker stack deploy --prune --resolve-image always -c n8n.yaml n8n > /dev/null 2>&1


#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço n8n está ativo
    if docker service ls --filter "name=n8n" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[N8N]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_editorn8n\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_flowise() {

dados
clear
nome_flowise
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/3\e[0m"
echo -en "\e[33mDigite o dominio para o Flowise (ex: flowise.oriondesign.art.br): \e[0m" && read -r url_flowise
echo ""

echo -e "\e[97mPasso$amarelo 2/3\e[0m"
echo -en "\e[33mDigite um usuario para o Flowise (ex: admin): \e[0m" && read -r user_flowise
echo ""

echo -e "\e[97mPasso$amarelo 3/3\e[0m"
echo -en "\e[33mDigite uma senha para o usuario (ex: @Senha123_): \e[0m" && read -r pass_flowise
echo ""

clear
nome_flowise
conferindo_as_info

echo -e "\e[33mDominio do Flowise\e[97m $url_flowise\e[0m"
echo ""

echo -e "\e[33mUsuario:\e[97m $user_flowise\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_flowise\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_flowise
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/3]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        criar_banco_postgres_flowise #> /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_flowise #> /dev/null 2>&1
fi

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO FLOWISE \e[33m[3/3]\e[0m"
echo ""

encryption_key=$(openssl rand -hex 16)

cat > flowise.yaml <<EOL
version: "3.7"

services:
  flowise:
    image: flowiseai/flowise:latest
    command: flowise start
    networks:
     - $nome_rede_interna
    volumes:
     - flowise_data:/root/.flowise
    environment:
     - FLOWISE_USERNAME=$user_flowise
     - FLOWISE_PASSWORD=$pass_flowise
     - DATABASE_TYPE=postgres
     - DATABASE_HOST=postgres
     - DATABASE_PORT=5432
     - DATABASE_USER=postgres
     - DATABASE_PASSWORD=$senha_postgres
     - DATABASE_NAME=flowise
     - FLOWISE_SECRETKEY_OVERWRITE=$encryption_key
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.flowise.rule=Host(\`$url_flowise\`)
        - traefik.http.services.flowise.loadBalancer.server.port=3000
        - traefik.http.routers.flowise.service=flowise
        - traefik.http.routers.flowise.entrypoints=websecure
        - traefik.http.routers.flowise.tls.certresolver=letsencryptresolver

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna

volumes:
  flowise_data:
    external: true

EOL

docker stack deploy --prune --resolve-image always -c flowise.yaml flowise  > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço flowise está ativo
    if docker service ls --filter "name=flowise" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Flowise]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_flowise\e[0m"
echo ""
echo -e "\e[33mUsuario:\e[97m $user_flowise\e[0m"
echo ""
echo -e "\e[33mSenha:\e[97m $pass_flowise\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_pgAdmin_4() {
dados
clear
nome_pgAdmin_4
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/3\e[0m"
echo -en "\e[33mDigite o dominio para o PgAdmin 4 (ex: pgadmin.oriondesign.art.br): \e[0m" && read -r url_PgAdmin_4
echo ""

echo -e "\e[97mPasso$amarelo 2/3\e[0m"
echo -en "\e[33mDigite um email para o PgAdmin 4 (ex: contato@oriondesign.art.br): \e[0m" && read -r user_PgAdmin_4
echo ""

echo -e "\e[97mPasso$amarelo 3/3\e[0m"
echo -en "\e[33mDigite uma senha para o usuario (Sem caracteres especiais: \!#$): \e[0m" && read -r pass_PgAdmin_4
echo ""

clear
nome_pgAdmin_4
conferindo_as_info

echo -e "\e[33mDominio do PgAdmin 4\e[97m $url_PgAdmin_4\e[0m"
echo ""

echo -e "\e[33mEmail:\e[97m $user_PgAdmin_4\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_PgAdmin_4\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_pgAdmin_4
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO PGADMIN 4 \e[33m[2/3]\e[0m"
echo ""

cat > pgadmin.yaml <<EOL
version: '3.7'

services:  
  pgadmin:
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: $user_PgAdmin_4
      PGADMIN_DEFAULT_PASSWORD: '$pass_PgAdmin_4'
    deploy:
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == manager
      resources:
          limits:
            cpus: '0.4'
            memory: 256M
      labels:
          - traefik.enable=true
          - traefik.http.routers.pgadmin.rule=Host(\`$url_PgAdmin_4\`)
          - traefik.http.services.pgadmin.loadbalancer.server.port=80
          - traefik.http.routers.pgadmin.service=pgadmin
          - traefik.http.routers.pgadmin.tls.certresolver=letsencryptresolver
          - traefik.http.routers.pgadmin.entrypoints=websecure
          - traefik.http.routers.pgadmin.tls=true
    networks:
        - $nome_rede_interna

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  pgadmin_data:
    external: true
EOL

docker stack deploy --prune --resolve-image always -c pgadmin.yaml pgadmin  > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço pgadmin está ativo
    if docker service ls --filter "name=pgadmin" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[PgAdmin 4]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_PgAdmin_4\e[0m"
echo ""
echo -e "\e[33mEmail:\e[97m $user_PgAdmin_4\e[0m"
echo ""
echo -e "\e[33mSenha:\e[97m $pass_PgAdmin_4\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_nocobase() {
dados
clear
nome_nocobase
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/4\e[0m"
echo -en "\e[33mDigite o dominio para o Nocobase (ex: nocobase.oriondesign.art.br): \e[0m" && read -r url_nocobase
echo ""

echo -e "\e[97mPasso$amarelo 2/4\e[0m"
echo -en "\e[33mDigite um email para o Nocobase (ex: contato@oriondesign.art.br): \e[0m" && read -r mail_nocobase
echo ""

echo -e "\e[97mPasso$amarelo 3/4\e[0m"
echo -en "\e[33mDigite um nome de usuario para o Nocobase (Sem caracteres especiais: \!#$): \e[0m" && read -r user_nocobase
echo ""

echo -e "\e[97mPasso$amarelo 4/4\e[0m"
echo -en "\e[33mDigite uma senha para o usuario (Sem caracteres especiais: \!#$): \e[0m" && read -r pass_nocobase
echo ""

clear
nome_nocobase
conferindo_as_info

echo -e "\e[33mDominio do Nocobase:\e[97m $url_nocobase\e[0m"
echo ""

echo -e "\e[33mEmail:\e[97m $mail_nocobase\e[0m"
echo ""

echo -e "\e[33mUsuario:\e[97m $user_nocobase\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_nocobase\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_nocobase
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/4]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        criar_banco_postgres_nocobase #> /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_nocobase #> /dev/null 2>&1
fi

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO NOCOBASE \e[33m[3/4]\e[0m"
echo ""

cat > nocobase.yaml <<EOL
version: "3.7"

services:
  nocobase:
    image: nocobase/nocobase:latest
    volumes:
      - nocobase_storage:/app/nocobase/storage
    environment:
      - DB_DIALECT=postgres
      - DB_HOST=postgres
      - DB_DATABASE=nocobase
      - DB_USER=postgres
      - DB_PASSWORD=$senha_postgres
      - LOCAL_STORAGE_BASE_URL=/storage/uploads
      - APP_KEY=$nocobase_key
      - API_BASE_URL=$url_nocobase
      - API_BASE_PATH=/api/
      - PROXY_TARGET_URL=$url_nocobase
      - INIT_ROOT_EMAIL=$mail_nocobase
      - INIT_ROOT_PASSWORD=$pass_nocobase
      - INIT_ROOT_NICKNAME=$user_nocobase
      - INIT_ROOT_USERNAME=$user_nocobase
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.nocobase.rule=Host(\`$url_nocobase\`)
        - traefik.http.services.nocobase.loadbalancer.server.port=80
        - traefik.http.routers.nocobase.service=nocobase
        - traefik.http.routers.nocobase.tls.certresolver=letsencryptresolver
        - traefik.http.routers.nocobase.entrypoints=websecure
        - traefik.http.routers.nocobase.tls=true

    networks:
        - $nome_rede_interna
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  nocobase_storage:
    external: true
EOL

docker stack deploy --prune --resolve-image always -c nocobase.yaml nocobase > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço nocobase está ativo
    if docker service ls --filter "name=nocobase" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Nocobase]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_nocobase\e[0m"
echo ""
echo -e "\e[33mEmail:\e[97m $mail_nocobase\e[0m"
echo ""
echo -e "\e[33mUsuario:\e[97m $user_nocobase\e[0m"
echo ""
echo -e "\e[33mSenha:\e[97m $pass_nocobase\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_botpress() {
dados
clear
nome_botpress
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/1\e[0m"
echo -en "\e[33mDigite o dominio para o Botpress (ex: botpress.oriondesign.art.br): \e[0m" && read -r url_botpress
echo ""

clear
nome_botpress
conferindo_as_info

echo -e "\e[33mDominio do Botpress:\e[97m $url_botpress\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_botpress
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/4]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/4]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        criar_banco_postgres_botpress > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_botpress > /dev/null 2>&1
fi

verificar_container_redis
    if [ $? -eq 0 ]; then
        sleep 1
    else
        ferramenta_redis  > /dev/null 2>&1
    fi

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO BOTPRESS \e[33m[3/4]\e[0m"
echo ""

cat > botpress.yaml <<EOL
version: "3.7"

services:
  botpress:
    image: botpress/server:latest
    volumes:
      - botpress_data:/botpress/data
    environment:
      - EXTERNAL_URL=https://$url_botpress
      - BP_PRODUCTION=true
      - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/botpress
      - REDIS_URL=redis://redis:6379
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.botpress.rule=Host(\`$url_botpress\`)
        - traefik.http.services.botpress.loadbalancer.server.port=3000
        - traefik.http.routers.botpress.service=botpress
        - traefik.http.routers.botpress.tls.certresolver=letsencryptresolver
        - traefik.http.routers.botpress.entrypoints=websecure
        - traefik.http.routers.botpress.tls=true

    networks:
        - $nome_rede_interna
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  botpress_data:
    external: true
EOL

docker stack deploy --prune --resolve-image always -c botpress.yaml botpress > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço botpress está ativo
    if docker service ls --filter "name=botpress" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Botpress]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_botpress\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi    
}

ferramenta_trocar_logos() {
dados
clear
nome_trocar_logos
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/1\e[0m"
echo -en "\e[33mDigite o link do seu Logo para o Favicon (.PNG ou .JPG): \e[0m" && read -r link_img
echo ""

#echo -e "\e[97mPasso$amarelo 2/0\e[0m"
#echo -en "\e[33mDigite o link do seu Logo para Painel (.SVG): \e[0m" && read -r link2_img
#echo ""

clear
nome_trocar_logos
conferindo_as_info

echo -e "\e[33mLogo para o Favicon (.PNG ou .JPG):\e[97m $link_img\e[0m"
echo ""

#echo -e "\e[33mLogo para o Painel (.SVG):\e[97m $link2_img\e[0m"
#echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_trocar_logos
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• TROCANDO FAVICONS \e[33m[1/3]\e[0m"
echo ""

sudo apt-get install imagemagick -y

sudo apt update

cd /var/lib/docker/volumes/chatwoot_public_orion/_data/

#mkdir origem

#PR do Fabio => https://github.com/hipnologo
if [ ! -d "origem" ]; then
    mkdir origem
fi

cd

wget -P /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/ $link_img

dir="/var/lib/docker/volumes/chatwoot_public_orion/_data/origem/"

filename=$(basename $dir/*)

mv $dir/$filename $dir/logo_thumbnail.png

cd

cd /var/lib/docker/volumes/chatwoot_public_orion/_data/

rm android-icon-36x36.png apple-icon-precomposed.png favicon-16x16.png apple-icon-72x72.png apple-icon-114x114.png apple-icon-144x144.png apple-icon-152x152.png apple-icon.png apple-icon-57x57.png favicon-32x32.png favicon-badge-32x32.png apple-icon-76x76.png android-icon-72x72.png favicon-512x512.png apple-icon-60x60.png favicon-96x96.png apple-icon-180x180.png android-icon-144x144.png ms-icon-310x310.png ms-icon-144x144.png android-icon-48x48.png favicon-badge-96x96.png apple-icon-120x120.png android-icon-96x96.png ms-icon-70x70.png android-icon-192x192.png ms-icon-150x150.png favicon-badge-16x16.png

cd

convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 36x36 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-36x36.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 192x192 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-precomposed.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 16x16 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-16x16.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 72x72 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-72x72.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 114x114 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-114x114.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 144x144 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-144x144.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 152x152 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-152x152.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 192x192 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 57x57 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-57x57.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 32x32 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-32x32.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 32x32 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-badge-32x32.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 76x76 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-76x76.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 72x72 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-72x72.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 512x512 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-512x512.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 60x60 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-60x60.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 96x96 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-96x96.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 180x180 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-180x180.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 144x144 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-144x144.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 310x310 /var/lib/docker/volumes/chatwoot_public_orion/_data/ms-icon-310x310.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 144x144 /var/lib/docker/volumes/chatwoot_public_orion/_data/ms-icon-144x144.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 48x48 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-48x48.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 96x96 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-badge-96x96.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 120x120 /var/lib/docker/volumes/chatwoot_public_orion/_data/apple-icon-120x120.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 96x96 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-96x96.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 70x70 /var/lib/docker/volumes/chatwoot_public_orion/_data/ms-icon-70x70.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 192x192 /var/lib/docker/volumes/chatwoot_public_orion/_data/android-icon-192x192.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 150x150 /var/lib/docker/volumes/chatwoot_public_orion/_data/ms-icon-150x150.png
convert /var/lib/docker/volumes/chatwoot_public_orion/_data/origem/logo_thumbnail.png -resize 16x16 /var/lib/docker/volumes/chatwoot_public_orion/_data/favicon-badge-16x16.png

systemctl daemon-reload && systemctl restart chatwoot.target

clear

nome_finalizado

echo "Logos alterados com sucesso!"

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_remover_stack() {


while true; do
    # Listar as stacks ativas no Docker Swarm com números, excluindo "portainer" e "traefik"
    clear
    nome_remover_stack
    echo "Stacks ativas:"
    echo ""
    docker stack ls --format "table {{.Name}}" | awk 'NR>1 && $1 != "portainer" && $1 != "traefik" {print NR-1". "$0}'
    echo ""
    # Solicitar ao usuário que escolha uma stack para remover ou sair
    read -p "Digite o número da stack que você deseja remover (ou digite '0' para voltar): " user_input

    # Verificar se o usuário deseja sair
    if [ "$user_input" == "0" ]; then
        echo "Saindo do script."
        break
    fi

    # Obter o nome da stack com base no número fornecido
    stack_name=$(docker stack ls --format "{{.Name}}" | sed -n "${user_input}p")

    # Verificar se a stack existe
    if docker stack ps "$stack_name" &> /dev/null; then
        # Remover a stack
        docker stack rm "$stack_name"
        echo "Removendo a stack $stack_name..."
    else
        echo "A stack $stack_name não foi encontrada."
    fi
done

}

ferramenta_wordpress() {
dados
clear
nome_wordpress
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/2\e[0m"
echo -en "\e[33mDigite o dominio para o Wordpress (ex: oriondesign.art.br ou loja.oriondesign.art.br): \e[0m" && read -r url_wordpress
echo ""

echo -e "\e[97mPasso$amarelo 2/2\e[0m"
echo -en "\e[33mDigite o nome do Site (Sem caracteres especiais: \!#$ | SEM ESPAÇOS ou Letras MAIUSCULAS): \e[0m" && read -r nome_site_wordpress
echo ""

nome_da_stack_mysql="${nome_site_wordpress}_mysql.yaml"
nome_da_stack_mysql_subir="${nome_site_wordpress}_mysql"

nome_da_stack_wordpress="${nome_site_wordpress}_wordpress.yaml"
nome_da_stack_wordpress_subir="${nome_site_wordpress}_wordpress"

nome_do_servico_mysql="${nome_site_wordpress}_mysql"
nome_da_date_mysql="${nome_site_wordpress}_mysql_data"

nome_do_servico_wordpress="${nome_site_wordpress}_wordpress"
nome_da_date_wordpress="${nome_site_wordpress}_data"
nome_da_date_wordpress_php="${nome_site_wordpress}_php"

clear
nome_wordpress
conferindo_as_info

echo -e "\e[33mDominio do Wordpress:\e[97m $url_wordpress\e[0m"
echo ""

echo -e "\e[33mNome do Site:\e[97m $nome_site_wordpress\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_wordpress
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/6]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• VERIFICANDO/INSTALANDO REDIS \e[33m[2/6]\e[0m"
echo ""

verificar_container_redis
    if [ $? -eq 0 ]; then
        echo ""
    else
        ferramenta_redis > /dev/null 2>&1
    fi

sleep 3

echo -e "\e[97m• VERIFICANDO/INSTALANDO MYSQL \e[33m[3/6]\e[0m"
echo ""

verificar_container_mysql
    if [ $? -eq 0 ]; then
        pegar_senha_mysql > /dev/null 2>&1
    else
        ferramenta_mysql > /dev/null 2>&1
        pegar_senha_mysql > /dev/null 2>&1
    fi

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
#  echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/6]\e[0m"
#  echo ""
#  while true; do
#      # Verifica se o serviço mysql está ativo
#      if docker service ls --filter "name=mysql" | grep "1/1"; then
#          sleep 2
#          break
#      fi
#      sleep 5
#  done
#######################################################################

sleep 15
dados
tempo_maximo_espera=180
tempo_espera=0
intervalo_espera=5

while [ $tempo_espera -le $tempo_maximo_espera ]; do
  # Obtém o nome completo do serviço MySQL
  nome_completo_servico_mysql=$(docker service ls --filter "name=mysql" --format "{{.Name}}" | head -n 1)

  if [ "$nome_completo_servico_mysql" ]; then
    # Verifica se o serviço MySQL está ativo
    if docker service ls --filter "name=$nome_completo_servico_mysql" | grep "1/1" > /dev/null; then
      # Verificar se o MySQL está pronto para aceitar conexões
      if docker exec $(docker ps -qf "name=.*$nome_completo_servico_mysql.*") mysqladmin ping -u root -p"$senha_mysql_wordpress" > /dev/null 2>&1; then
        echo "Serviço MySQL está pronto."
        
        # Criar o banco de dados
        docker exec -it $(docker ps -qf "name=.*${nome_completo_servico_mysql}.*") mysql -u root -p"$senha_mysql_wordpress" -e "CREATE DATABASE $nome_site_wordpress;"
        
        break
      else
        echo "Aguardando serviço MySQL estar pronto. Tentando novamente em $intervalo_espera segundos..."
        sleep $intervalo_espera
        tempo_espera=$((tempo_espera + intervalo_espera))
      fi
    else
      echo "Aguardando serviço MySQL iniciar. Tentando novamente em $intervalo_espera segundos..."
      sleep $intervalo_espera
      tempo_espera=$((tempo_espera + intervalo_espera))
    fi
  else
    echo "Serviço MySQL não encontrado. Tentando novamente em $intervalo_espera segundos..."
    sleep $intervalo_espera
    tempo_espera=$((tempo_espera + intervalo_espera))
  fi
done

if [ $tempo_espera -gt $tempo_maximo_espera ]; then
  echo "Erro: Tempo máximo de espera atingido. Serviço MySQL não está pronto."
fi

#docker exec -it $(docker ps -qf "name=${nome_do_servico_mysql}") mysql -u root -p"${senha_mysql_wordpress}" -e "CREATE DATABASE ${nome_site_wordpress};"
#docker exec -it $(docker ps -qf "name=.*${nome_completo_servico_mysql}.*") mysql -u root -p"$senha_mysql_wordpress" -e "CREATE DATABASE $nome_site_wordpress;"


echo -e "\e[97m• INSTALANDO WORDPRESS \e[33m[5/6]\e[0m"
echo ""

sleep 5

cat > $nome_da_stack_wordpress <<EOL
version: "3.7"
services:
  $nome_do_servico_wordpress:
    image: wordpress:latest
    volumes:
      - $nome_da_date_wordpress:/var/www/html
      - $nome_da_date_wordpress_php:/usr/local/etc/php

    networks:
      - $nome_rede_interna
    environment:
      - WORDPRESS_DB_NAME=$nome_site_wordpress
      - WORDPRESS_DB_HOST=mysql
      - WORDPRESS_DB_PORT=3306
      - WORDPRESS_DB_USER=root
      - WORDPRESS_DB_PASSWORD=$senha_mysql_wordpress
      - WP_REDIS_HOST=redis
      - WP_REDIS_DATABASE=6
      - VIRTUAL_HOST=$url_wordpress
      - WP_LOCALE=pt_BR
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.$nome_do_servico_wordpress.rule=Host(\`$url_wordpress\`)
        - traefik.http.routers.$nome_do_servico_wordpress.entrypoints=websecure
        - traefik.http.routers.$nome_do_servico_wordpress.tls.certresolver=letsencryptresolver
        - traefik.http.routers.$nome_do_servico_wordpress.service=$nome_do_servico_wordpress
        - traefik.http.services.$nome_do_servico_wordpress.loadbalancer.server.port=80
        - traefik.http.services.$nome_do_servico_wordpress.loadbalancer.passHostHeader=true
volumes:
  $nome_da_date_wordpress:
    external: true
    name: $nome_da_date_wordpress
  $nome_da_date_wordpress_php:
    external: true
    name: $nome_da_date_wordpress_php
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true
EOL

docker stack deploy --prune --resolve-image always -c $nome_da_stack_wordpress $nome_da_stack_wordpress_subir #> /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[6/6]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço wordpress está ativo
    if docker service ls --filter "name=$nome_do_servico_wordpress" | grep "1/1"; then
        sleep 2
        break
    fi
    sleep 5
done
#######################################################################

#Editando o PHP.INI

cp /var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini-production /var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini
#/var/lib/docker/volumes/noiro_php/_data
#cd /var/lib/docker/volumes/${nome_do_servico_wordpress}_${nome_da_date_wordpress_php}/_data
#
caminho_php_ini="/var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini"
#
sed -i "s/^upload_max_filesize =.*/upload_max_filesize = 1024M/" "$caminho_php_ini"
sed -i "s/^max_execution_time =.*/max_execution_time = 450/" "$caminho_php_ini"
sed -i "s/^memory_limit =.*/memory_limit = 1024M/" "$caminho_php_ini"

cd
docker service update --force ${nome_do_servico_wordpress}_${nome_do_servico_wordpress}


#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Wordpress]\e[0m"
echo ""

echo -e "\e[33mDominio:\e[97m https://$url_wordpress\e[0m"
echo ""

echo -e "\e[33mNome do Site:\e[97m $nome_site_wordpress\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   

}

ferramenta_baserow() {
dados
clear
nome_baserow
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/1\e[0m"
echo -en "\e[33mDigite o dominio para o Baserow (ex: base.oriondesign.art.br): \e[0m" && read -r url_baserow
echo ""

clear
nome_baserow
conferindo_as_info

echo -e "\e[33mDominio do Baserow:\e[97m $url_baserow\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_baserow
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• INSTALANDO BASEROW \e[33m[2/3]\e[0m"
echo ""

cat > baserow.yaml <<EOL
version: '3.7'

services:
  baserow:
    image: baserow/baserow:latest
    environment:
      - BASEROW_PUBLIC_URL=https://$url_baserow
      - BASEROW_CADDY_ADDRESSES=:8080
    volumes:
      - baserow_data:/baserow/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.baserow.rule=Host(\`$url_baserow\`)
        - traefik.http.services.baserow.loadbalancer.server.port=8080
        - traefik.http.routers.baserow.service=baserow
        - traefik.http.routers.baserow.tls.certresolver=letsencryptresolver
        - traefik.http.routers.baserow.entrypoints=websecure
        - traefik.http.routers.baserow.tls=true
    networks:
      - $nome_rede_interna

networks:
  $nome_rede_interna:
    external: true

volumes:
  baserow_data:
    external: true
EOL

docker stack deploy --prune --resolve-image always -c baserow.yaml baserow #> /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço baserow está ativo
    if docker service ls --filter "name=baserow" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Baserow]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_baserow\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   
}

ferramenta_mongodb() {
clear
dados
nome_mongodb
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/1\e[0m"
echo -en "\e[33mDigite o nome de usuario (Sem caracteres especiais: \!#$): \e[0m" && read -r user_mongo
echo ""

pass_mongo=$(openssl rand -hex 16)

clear
nome_mongodb
conferindo_as_info

echo -e "\e[33mUsuario:\e[97m $user_mongo\e[0m"
echo ""

echo -e "\e[33mSenha gerada:\e[97m $pass_mongo\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_mongodb  
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• INSTALANDO MONGODB \e[33m[2/3]\e[0m"
echo ""

cat > mongodb.yaml <<EOL
version: '3.7'

services:
  mongodb:
    image: mongo:latest
    command: mongod --port 27017
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
      - mongodb_configdb_data:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$user_mongo
      - MONGO_INITDB_ROOT_PASSWORD=$pass_mongo
      - PUID=1000
      - PGID=1000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 2048M
    networks:
      - $nome_rede_interna

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  mongodb_data:
    external: true
    name: mongodb_data
  mongodb_configdb_data:
    external: true
    name: mongodb_configdb_data
EOL

docker stack deploy --prune --resolve-image always -c mongodb.yaml mongodb #> /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço mongodb está ativo
    if docker service ls --filter "name=mongodb" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[MongoDB]\e[0m"
echo ""
echo -e "\e[33mUsuario:\e[97m $user_mongo\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_mongo\e[0m"
echo ""

ip_vps=$(curl -s ifconfig.me)

echo -e "\e[33mUrl Database:\e[97m mongodb://$user_mongo:$pass_mongo@$ip_vps:27017/?authSource=admin&readPreference=primary&ssl=false&directConnection=true\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   
}

ferramenta_rabbitmq() {
clear
dados
nome_rabbitmq
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/3\e[0m"
echo -en "\e[33mDigite o dominio para o RabbitMQ (ex: mq.oriondesign.art.br): \e[0m" && read -r url_rabbitmq
echo ""

echo -e "\e[97mPasso$amarelo 2/3\e[0m"
echo -en "\e[33mDigite o nome de usuario (Sem caracteres especiais: @\!#$): \e[0m" && read -r user_rabbitmq
echo ""

echo -e "\e[97mPasso$amarelo 3/3\e[0m"
echo -en "\e[33mDigite a senha do usuario (Sem caracteres especiais: @\!#$): \e[0m" && read -r pass_rabbitmq
echo ""

clear
nome_rabbitmq
conferindo_as_info

echo -e "\e[33mDominio do RabbitMQ:\e[97m $url_rabbitmq\e[0m"
echo ""

echo -e "\e[33mUsario:\e[97m $user_rabbitmq\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_rabbitmq\e[0m"
echo ""

echo -e "\e[33mRabbitMQ_URL:\e[97m amqp://$user_rabbitmq:$pass_rabbitmq@rabbitmq:5672\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_rabbitmq
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• INSTALANDO RABBITMQ \e[33m[2/3]\e[0m"
echo ""

cat > rabbitmq.yaml <<EOL
version: '3.7'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=$user_rabbitmq
      - RABBITMQ_DEFAULT_PASS=$pass_rabbitmq
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 2048M
      labels:
        - traefik.enable=true
        - traefik.http.routers.rabbitmq.rule=Host(\`$url_rabbitmq\`)
        - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
        - traefik.http.routers.rabbitmq.service=rabbitmq
        - traefik.http.routers.rabbitmq.tls.certresolver=letsencryptresolver
        - traefik.http.routers.rabbitmq.entrypoints=websecure
        - traefik.http.routers.rabbitmq.tls=true
    networks:
      - $nome_rede_interna

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  rabbitmq:
    external: true
    name: rabbitmq
EOL

docker stack deploy --prune --resolve-image always -c rabbitmq.yaml rabbitmq #> /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço rabbitmq está ativo
    if docker service ls --filter "name=rabbitmq" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[RabbitMQ]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_rabbitmq\e[0m"
echo ""

echo -e "\e[33mUsuario:\e[97m $user_rabbitmq\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $pass_rabbitmq\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   
}

ferramenta_uptimekuma() {
clear
dados
nome_uptimekuma
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/1\e[0m"
echo -en "\e[33mDigite o dominio para o Uptime Kuma (ex: status.oriondesign.art.br): \e[0m" && read -r url_uptimekuma
echo ""

clear
nome_uptimekuma
conferindo_as_info

echo -e "\e[33mDominio do Uptime Kuma:\e[97m $url_uptimekuma\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_uptimekuma
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• INSTALANDO UPTIME KUMA \e[33m[2/3]\e[0m"
echo ""

cat > uptimekuma.yaml <<EOL
version: "3.7"

services:
  uptimekuma:
    image: louislam/uptime-kuma:latest
    #container_name: uptimekuma
    volumes:
      - uptimekuma:/app/data
    ports:
      - "3001:3001"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.uptimekuma.rule=Host(\`$url_uptimekuma\`)
        - traefik.http.routers.uptimekuma.entrypoints=websecure
        - traefik.http.routers.uptimekuma.tls.certresolver=letsencryptresolver
        - traefik.http.services.uptimekuma.loadBalancer.server.port=3001
        - traefik.http.routers.uptimekuma.service=uptimekuma
    networks:
      - $nome_rede_interna

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna

volumes:
  uptimekuma:
    external: true
    name: uptimekuma

EOL

docker stack deploy --prune --resolve-image always -c uptimekuma.yaml uptimekuma #> /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço uptimekuma está ativo
    if docker service ls --filter "name=uptimekuma" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Uptime Kuma]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_uptimekuma\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   
}




ferramenta_testeemail() {
clear
dados
nome_testeemail
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/4\e[0m"
echo -en "\e[33mDigite o Email: \e[0m" && read -r email_teste
echo ""

echo -e "\e[97mPasso$amarelo 2/4\e[0m"
echo -en "\e[33mDigite a Senha do email: \e[0m" && read -r senha_teste
echo ""

echo -e "\e[97mPasso$amarelo 3/4\e[0m"
echo -en "\e[33mDigite o Host Smtp: \e[0m" && read -r host_teste
echo ""

echo -e "\e[97mPasso$amarelo 4/4\e[0m"
echo -en "\e[33mDigite a Porta Smtp: \e[0m" && read -r porta_teste
echo ""

clear
nome_testeemail
conferindo_as_info

echo -e "\e[33mEmail:\e[97m $email_teste\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $senha_teste\e[0m"
echo ""

echo -e "\e[33mHost:\e[97m $host_teste\e[0m"
echo ""

echo -e "\e[33mPorta:\e[97m $porta_teste\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    nome_testando
    break
else
    clear
    nome_testeemail
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO VERIFICAÇÃO \e[33m[1/3]\e[0m"
echo ""

sudo apt-get update > /dev/null 2>&1
sudo apt-get install swaks -y > /dev/null 2>&1

msg="Se você está lendo isso, o seu SMTP está funcionando =D.
By: OrionDesign"

if swaks --to "$email_teste" --from "$email_teste" --server "$host_teste" --port "$porta_teste" --auth LOGIN --auth-user "$email_teste" --auth-password "$senha_teste" --tls --body "$msg"; then
    sleep 2
    clear
    nome_testeemail
    echo -e "\e[32m[Resultado do Teste SMTP]\e[0m"
    echo ""
    echo -e "\e[33mOs dados informados\e[92m estão funcionando corretamente\e[33m.\e[0m"
else
    sleep 2
    clear
    nome_testeemail
    echo -e "\e[32m[Resultado do Teste SMTP]\e[0m"
    echo ""
    echo -e "\e[33mOs dados informados\e[91m NÃO estão funcionando corretamente.\e[33m Por favor, verifique os dados e tente novamente.\e[0m"
fi

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi   
}

ferramenta_calcom() {

dados
clear
nome_calcom
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/5\e[0m"
echo -en "\e[33mDigite o dominio para o Cal (ex: cal.oriondesign.art.br): \e[0m" && read -r url_calcom
echo ""

echo -e "\e[97mPasso$amarelo 2/5\e[0m"
echo -en "\e[33mDigite o Email SMTP: (ex: contato@oriondesign.art.br): \e[0m" && read -r email_calcom
echo ""
    
echo -e "\e[97mPasso$amarelo 3/5\e[0m"
echo -en "\e[33mDigite a Senha SMTP do email (Sem caracteres especiais: \!#$ | se estiver usando gmail use a senha de app): \e[0m" && read -r senha_email_calcom
echo ""

echo -e "\e[97mPasso$amarelo 4/5\e[0m"
echo -en "\e[33mDigite o HOST SMTP do email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_calcom
echo ""

echo -e "\e[97mPasso$amarelo 5/5\e[0m"
echo -en "\e[33mDigite a Porta SMTP do email (ex: 465): \e[0m" && read -r porta_smtp_calcom
echo ""

clear
nome_calcom
conferindo_as_info

echo -e "\e[33mDominio do Cal.com\e[97m $url_calcom\e[0m"
echo ""

echo -e "\e[33mEmail SMTP:\e[97m $email_calcom\e[0m"
echo ""

echo -e "\e[33mSenha SMTP:\e[97m $senha_email_calcom\e[0m"
echo ""

echo -e "\e[33mHost SMTP:\e[97m $smtp_email_calcom\e[0m"
echo ""

echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_calcom\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_calcom
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/3]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        criar_banco_postgres_calcom > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_calcom > /dev/null 2>&1
fi

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO CAL.COM \e[33m[3/3]\e[0m"
echo ""

secret=$(openssl rand -hex 16)

cat > calcom.yaml <<EOL
version: "3.7"
services:
  calcom:
    image: calcom/cal.com:latest
    hostname: calcom
    networks:
      - $nome_rede_interna
    environment:
    # Licenças
      - NEXT_PUBLIC_LICENSE_CONSENT=agree
      - LICENSE=agree

    # Brand
      - NEXT_PUBLIC_APP_NAME="Cal.com"
      - NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS="help@cal.com"
      - NEXT_PUBLIC_COMPANY_NAME="Cal.com, Inc."
      - NEXT_PUBLIC_DISABLE_SIGNUP=false

    # Encrypition
      - NEXTAUTH_SECRET=$secret 
      - CALENDSO_ENCRYPTION_KEY=$secret

    # URLs
      - NEXT_PUBLIC_WEBAPP_URL=https://$url_calcom
      - BASE_URL=https://$url_calcom
      - NEXTAUTH_URL=https://$url_calcom
      - NEXT_PUBLIC_CONSOLE_URL=https://$url_calcom
      - NEXT_PUBLIC_APP_URL=https://$url_calcom
      - NEXT_PUBLIC_WEBSITE_URL=https://$url_calcom
      - WEB_APP=https://$url_calcom

    # Banco de dadosPostgress
      - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/calcom

    # Configurações de Email e SMTP
      - EMAIL_FROM=$email_calcom
      - EMAIL_SERVER_HOST=$smtp_email_calcom
      - EMAIL_SERVER_PORT=$porta_smtp_calcom
      - EMAIL_SERVER_USER=$email_calcom
      - EMAIL_SERVER_PASSWORD=$senha_email_calcom

    # Nodes
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0

    # Integração com Microsoft 365
      #- MS_GRAPH_CLIENT_ID=
      #- MS_GRAPH_CLIENT_SECRET=

    # Integração com Zoom
      #- ZOOM_CLIENT_ID=
      #- ZOOM_CLIENT_SECRET=

    # Licença do Cal (se tiver)
      #- CALCOM_LICENSE_KEY=

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      labels:
      - traefik.enable=true
      - traefik.http.routers.calcom.rule=Host(\`$url_calcom\`)
      - traefik.http.routers.calcom.entrypoints=websecure
      - traefik.http.routers.calcom.priority=1
      - traefik.http.routers.calcom.tls.certresolver=letsencryptresolver
      - traefik.http.routers.calcom.service=calcom
      - traefik.http.services.calcom.loadbalancer.server.port=3000
      - traefik.http.services.calcom.loadbalancer.passHostHeader=1
networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

EOL

docker stack deploy --prune --resolve-image always -c calcom.yaml calcom  > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
echo -e "\e[97mEste passo podera demorar um pouco para terminar\e[0m"
sleep 1
while true; do
    # Verifica se o serviço calcom está ativo
    if docker service ls --filter "name=calcom" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Cal.com]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_calcom\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_mautic() {
clear
dados
nome_mautic
preencha_as_info

while true; do

    echo -e "\e[97mPasso$amarelo 1/4\e[0m"
    echo -en "\e[33mDigite o Dominio para o Mautic (ex: mautic.oriondesign.art.br): \e[0m" && read -r url_mautic
    echo ""

    echo -e "\e[97mPasso$amarelo 2/4\e[0m"
    echo -en "\e[33mDigite um usuario (ex: oriondesign): \e[0m" && read -r user_mautic
    echo ""

    echo -e "\e[97mPasso$amarelo 3/4\e[0m"
    echo -en "\e[33mDigite o Email de admin: (ex: contato@oriondesign.art.br): \e[0m" && read -r email_mautic
    echo ""
    
    echo -e "\e[97mPasso$amarelo 4/4\e[0m"
    echo -en "\e[33mDigite uma Senha (Sem caracteres especiais: \!#$): \e[0m" && read -r senha_email_mautic
    echo ""
    
    clear
    nome_mautic
    conferindo_as_info

    echo -e "\e[33mDominio do Mautic:\e[97m $url_mautic\e[0m"
    echo ""

    echo -e "\e[33mUsuario admin:\e[97m $user_mautic\e[0m"
    echo ""

    echo -e "\e[33mEmail do admin:\e[97m $email_mautic\e[0m"
    echo ""    

    echo -e "\e[33mSenha do Admin:\e[97m $senha_email_mautic\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_mautic
        preencha_as_info
    fi
    done

echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""

sleep 2

echo -e "\e[97m• VERIFICANDO/INSTALANDO MYSQL \e[33m[2/3]\e[0m"
echo ""
dados
verificar_container_mysql
    if [ $? -eq 0 ]; then
        pegar_senha_mysql > /dev/null 2>&1
        criar_banco_mysql_mautic
    else
        ferramenta_mysql > /dev/null 2>&1
        pegar_senha_mysql > /dev/null 2>&1
        criar_banco_mysql_mautic
    fi

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
  echo -e "\e[97m• VERIFICANDO SERVIÇO MYSQL \e[33m[3/6]\e[0m"
  echo ""
  while true; do
      # Verifica se o serviço mysql está ativo
      if docker service ls --filter "name=mysql" | grep "1/1"; then
          sleep 2
          break
      fi
      sleep 5
  done
#######################################################################

sleep 15

#tempo_maximo_espera=180
#tempo_espera=0
#intervalo_espera=5
#
#pegar_senha_mysql

#while [ $tempo_espera -le $tempo_maximo_espera ]; do
#  # Obtém o nome completo do serviço MySQL
#  nome_completo_servico_mysql=$(docker service ls --filter "name=mysql" --format "{{.Name}}" | head -n 1)
#
#  if [ "$nome_completo_servico_mysql" ]; then
#    # Verifica se o serviço MySQL está ativo
#    if docker service ls --filter "name=$nome_completo_servico_mysql" | grep "1/1" > /dev/null; then
#      # Verificar se o MySQL está pronto para aceitar conexões
#      if docker exec $(docker ps -qf "name=.*$nome_completo_servico_mysql.*") mysqladmin ping -u root -p$senha_mysql > /dev/null 2>&1; then
#        echo "Serviço MySQL está pronto."
#        
#        # Criar o banco de dados
#        docker exec -it $(docker ps -qf "name=.*${nome_completo_servico_mysql}.*") mysql -u root -p$senha_mysql -e "CREATE DATABASE mautic;"
#        
#        break
#      else
#        echo "Aguardando serviço MySQL estar pronto. Tentando novamente em $intervalo_espera segundos..."
#        sleep $intervalo_espera
#        tempo_espera=$((tempo_espera + intervalo_espera))
#      fi
#    else
#      echo "Aguardando serviço MySQL iniciar. Tentando novamente em $intervalo_espera segundos..."
#      sleep $intervalo_espera
#      tempo_espera=$((tempo_espera + intervalo_espera))
#    fi
#  else
#    echo "Serviço MySQL não encontrado. Tentando novamente em $intervalo_espera segundos..."
#    sleep $intervalo_espera
#    tempo_espera=$((tempo_espera + intervalo_espera))
#  fi
#done
#
#if [ $tempo_espera -gt $tempo_maximo_espera ]; then
#  echo "Erro: Tempo máximo de espera atingido. Serviço MySQL não está pronto."
#fi



echo -e "\e[97m• INSTALANDO MAUTIC \e[33m[3/3]\e[0m"
echo ""

#CRIANDO STACK MAUTIC

cat > mautic.yaml <<EOL
version: "3.7"

services:
  mautic:
    image: mautic/mautic:v4
    entrypoint: /entrypoint.sh
    command: apache2-foreground
    volumes:
      - mautic_data:/var/www/html
    environment:
      - MAUTIC_DB_NAME=mautic
      - MAUTIC_DB_HOST=mysql
      - MAUTIC_DB_PORT=3306
      - MAUTIC_DB_USER=root
      - MAUTIC_DB_PASSWORD=$senha_mysql_wordpress
      - MAUTIC_ADMIN_EMAIL=$email_mautic
      - MAUTIC_ADMIN_PASSWORD=$senha_email_mautic
      - MAUTIC_ADMIN_USERNAME=$user_mautic
      - MAUTIC_URL=https://$url_mautic
      - MAUTIC_TRUSTED_PROXIES=["0.0.0.0/0"]
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 2048M
      labels:
        - traefik.enable=true
        - traefik.http.routers.mautic.rule=Host(\`$url_mautic\`)
        - traefik.http.services.mautic.loadbalancer.server.port=80
        - traefik.http.routers.mautic.entrypoints=websecure
        - traefik.http.routers.mautic.tls.certresolver=letsencryptresolver
        - traefik.http.routers.mautic.service=mautic
        - traefik.http.services.mautic.loadbalancer.passHostHeader=true
    networks:
      - $nome_rede_interna

volumes:
  mautic_data:
    external: true
    name: mautic_data

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

EOL

#SUBINDO STACK DO TYPEBOT
docker stack deploy --prune --resolve-image always -c mautic.yaml mautic > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO\e[0m"
sleep 1
while true; do
    # Verifica se o serviço typebot está ativo
    if docker service ls --filter "name=mautic" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#mautic_config="/var/lib/docker/volumes/mautic_data/_data/app/config/local.php"
#
## Verifica se o arquivo de configuração existe
#if [ -e "$mautic_config" ]; then
#    # Remove a parte indesejada do arquivo de configuração
#    sed -i "/'trusted_proxies' =>/,/),/ { /'trusted_proxies' =>/ { N; N; N; d; }}" "$mautic_config"
#
#    echo "Configuração removida com sucesso."
#else
#    echo "O arquivo de configuração não foi encontrado."
#fi
#
#docker stack deploy --prune --resolve-image always -c mautic.yaml mautic > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
#sleep 1
#while true; do
#    # Verifica se o serviço typebot está ativo
#    if docker service ls --filter "name=mautic" | grep "1/1"; then
#        sleep 10
#        break
#    fi
#
#    sleep 5
#done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Mautic]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_mautic\e[0m"
echo ""
echo -e "\e[33mUsuario:\e[97m $user_mautic\e[0m"
echo ""
echo -e "\e[33mEmail:\e[97m $email_mautic\e[0m"
echo ""
echo -e "\e[33mSenha:\e[97m $senha_email_mautic\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi
}

ferramenta_appsmith() {

dados
clear
nome_appsmith
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/3\e[0m"
echo -en "\e[33mDigite o dominio para o Appsmith (ex: appsmith.oriondesign.art.br): \e[0m" && read -r url_appsmith
echo ""

clear
nome_appsmith
conferindo_as_info

echo -e "\e[33mDominio do Appsmith\e[97m $url_appsmith\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_appsmith
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO APPSMITH \e[33m[2/3]\e[0m"
echo ""

secret=$(openssl rand -hex 16)

cat > appsmith.yaml <<EOL
version: "3.7"

services:
  appsmith:
    image: appsmith/appsmith-ce:latest
    networks:
      - $nome_rede_interna
    volumes:
      - appsmith_data:/appsmith-stacks
    environment:
      - APPSMITH_CUSTOM_DOMAIN=https://$url_appsmith
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.appsmith.rule=Host(\`$url_appsmith\`)
        - traefik.http.routers.appsmith.entrypoints=websecure
        - traefik.http.routers.appsmith.tls.certresolver=letsencryptresolver
        - traefik.http.routers.appsmith.service=appsmith
        - traefik.http.services.appsmith.loadbalancer.server.port=80
        - traefik.http.services.appsmith.loadbalancer.passHostHeader=true

volumes:
  appsmith_data:
    external: true
    name: appsmith_data

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

EOL

docker stack deploy --prune --resolve-image always -c appsmith.yaml appsmith  > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
echo -e "\e[97mEste passo podera demorar um pouco para terminar\e[0m"
sleep 1
while true; do
    # Verifica se o serviço appsmith está ativo
    if docker service ls --filter "name=appsmith" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 60
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[Appsmith]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m https://$url_appsmith\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_qdrant() {

dados
clear
nome_qdrant
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/2\e[0m"
echo -en "\e[33mDigite o ip da vps (ex: 123.45.678.99): \e[0m" && read -r ip_vps
echo ""

echo -e "\e[97mPasso$amarelo 2/2\e[0m"
echo -en "\e[33mDigite quantos Nodes você deseja (recomendado: 5): \e[0m" && read -r nodes_qdrant
echo ""

clear
nome_qdrant
conferindo_as_info

echo -e "\e[33mIp da VPS:\e[97m $ip_vps\e[0m"
echo ""

echo -e "\e[33mQuantidade de Nodes:\e[97m $nodes_qdrant\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_qdrant
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO QDRANT \e[33m[2/3]\e[0m"
echo ""

cat > qdrant.yaml <<-EOF
version: "3.7"

services:
EOF

for ((node=0; node<nodes_qdrant; node++))
do
    SERVICE_NAME=qdrant_node_$node

    HTTP_PORT=$((6330 + node * 10 + 3))
    GRPC_PORT=$((6330 + node * 10 + 4))

    if ((node == 0))
    then
        COMMAND="./qdrant --uri 'http://$SERVICE_NAME:6335'"
    else
        COMMAND="bash -c \"sleep $((10 + node / 10 + RANDOM % 10)) && ./qdrant --bootstrap 'http://qdrant_node_0:6335' --uri 'http://$SERVICE_NAME:6335'\""
    fi

    cat >> qdrant.yaml <<-EOF
  $SERVICE_NAME:
    image: qdrant/qdrant:latest
    command: $COMMAND
    restart: always
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__CLUSTER__ENABLED=true
      - QDRANT__CLUSTER__P2P__PORT=6335
      - QDRANT__CLUSTER__CONSENSUS__MAX_MESSAGE_QUEUE_SIZE=5000
      - QDRANT__LOG_LEVEL=debug,raft=info
    ports:
      - "$HTTP_PORT:6333"
      - "$GRPC_PORT:6334"
    deploy:
      resources:
        limits:
          cpus: "0.3"

EOF
done

docker stack deploy --prune --resolve-image always -c qdrant.yaml qdrant  > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
echo -e "\e[97mEste passo podera demorar um pouco para terminar\e[0m"
sleep 1
while true; do
    # Verifica se o serviço qdrant está ativo
    if docker service ls --filter "name=qdrant" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[QDrant]\e[0m"
echo ""
echo -e "\e[33mDashboard:\e[97m http://$ip_vps:6333/dashboard\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_woofed() {

    clear
    nome_woofedcrm
    preencha_as_info
    dados
    
    while true; do

    echo -e "\e[97mPasso$amarelo 1/4\e[0m"
    echo -en "\e[33mDigite o Dominio para o WoofedCRM (ex: crm.oriondesign.art.br): \e[0m" && read -r url_woofed
    echo ""

    echo -e "\e[97mPasso$amarelo 2/4\e[0m"
    echo -e "\e[97mEncontre a versão em:$amarelo https://hub.docker.com/r/douglara/woofedcrm/tags\e[0m"
    echo -en "\e[33mDigite a versão desejada: \e[0m" && read -r v_woofed
    echo ""

    echo -e "\e[97mPasso$amarelo 3/4\e[0m"
    echo -en "\e[33mDigite o User do MOTOR (ex: oriondesign): \e[0m" && read -r email_admin_woofed
    echo ""

    echo -e "\e[97mPasso$amarelo 4/4\e[0m"
    echo -en "\e[33mDigite a Senha do MOTOR (ex: @Senha123_): \e[0m" && read -r senha_email_woofed
    echo ""
    
    clear
    nome_woofedcrm
    conferindo_as_info

    echo -e "\e[33mDominio:\e[97m $url_woofed\e[0m"
    echo ""
    echo -e "\e[33mVersão:\e[97m $v_woofed\e[0m"
    echo ""
    echo -e "\e[33mUser MOTOR:\e[97m $email_admin_woofed\e[0m"
    echo ""
    echo -e "\e[33mSenha MOTOR:\e[97m $senha_email_woofed\e[0m"
    echo ""

    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
        clear
        instalando_msg
        break
    else
        clear
        nome_woofedcrm
        preencha_as_info
    fi
    done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/6]\e[0m"
echo ""
sleep 2

echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/6]\e[0m"
echo ""

    dados
    verificar_container_postgres
    if [ $? -eq 0 ]; then
        echo ""
        pegar_senha_postgres #> /dev/null 2>&1
        criar_banco_postgres_woofedcrm #> /dev/null 2>&1
    else
        ferramenta_postgres #> /dev/null 2>&1
        pegar_senha_postgres #> /dev/null 2>&1
        criar_banco_postgres_woofedcrm #> /dev/null 2>&1
    fi

sleep 5

echo -e "\e[97m• VERIFICANDO/INSTALANDO REDIS \e[33m[3/6]\e[0m"
echo ""

    verificar_container_redis
    if [ $? -eq 0 ]; then
        echo ""
    else
        ferramenta_redis #> /dev/null 2>&1
    fi

#MENSAGEM DE INSTALANDO WOOFEDCRM (PASSOS)
echo -e "\e[97m• INSTALANDO WOOFED CRM \e[33m[4/6]\e[0m"
echo ""

encryption_key_woofed=$(openssl rand -hex 16)

cat > woofedcrm.yaml <<EOL
version: '3.7'

services:
  woofedcrm_orion:
    image: douglara/woofedcrm:$v_woofed
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    networks:
      - $nome_rede_interna
    volumes:
      - woofedcrm_data:/app
    environment:
      - ENABLE_USER_SIGNUP=true
      - RAILS_ENV=production
      - RACK_ENV=production
      - NODE_ENV=production
      - MOTOR_AUTH_USERNAME=$email_admin_woofed
      - MOTOR_AUTH_PASSWORD=$senha_email_woofed
      - FRONTEND_URL=https://$url_woofed
      - SECRET_KEY_BASE=$encryption_key_woofed
      - DATABASE_URL=postgres://postgres:$senha_postgres@postgres:5432/woofedcrm
      - REDIS_URL=redis://redis:6379/0
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_LEVEL=debug
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.woofedcrm.rule=Host(\`$url_woofed\`)
        - traefik.http.routers.woofedcrm.entrypoints=websecure
        - traefik.http.routers.woofedcrm.tls.certresolver=letsencryptresolver
        - traefik.http.routers.woofedcrm.priority=1
        - traefik.http.routers.woofedcrm.service=woofedcrm
        - traefik.http.services.woofedcrm.loadbalancer.server.port=3000 
        - traefik.http.services.woofedcrm.loadbalancer.passhostheader=true 
        - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.routers.woofedcrm.middlewares=sslheader@docker

  sidekiq_orion:
    image: douglara/woofedcrm:$v_woofed
    command: bundle exec sidekiq -C config/sidekiq.yml
    networks:
      - $nome_rede_interna
    volumes:
      - woofedcrm_data:/app
    environment:
      - ENABLE_USER_SIGNUP=true
      - RAILS_ENV=production
      - RACK_ENV=production
      - NODE_ENV=production
      - MOTOR_AUTH_USERNAME=$email_admin_woofed
      - MOTOR_AUTH_PASSWORD=$senha_email_woofed
      - FRONTEND_URL=https://$url_woofed
      - SECRET_KEY_BASE=$encryption_key_woofed
      - DATABASE_URL=postgres://postgres:$senha_postgres@postgres:5432/woofedcrm
      - REDIS_URL=redis://redis:6379/0
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_LEVEL=debug
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    
  good_job_orion:
    image: douglara/woofedcrm:$v_woofed
    command: bundle exec good_job
    networks:
      - $nome_rede_interna
    volumes:
      - woofedcrm_data:/app
    environment:
      - ENABLE_USER_SIGNUP=true
      - RAILS_ENV=production
      - RACK_ENV=production
      - NODE_ENV=production
      - MOTOR_AUTH_USERNAME=$email_admin_woofed
      - MOTOR_AUTH_PASSWORD=$senha_email_woofed
      - FRONTEND_URL=https://$url_woofed
      - SECRET_KEY_BASE=$encryption_key_woofed
      - DATABASE_URL=postgres://postgres:$senha_postgres@postgres:5432/woofedcrm
      - REDIS_URL=redis://redis:6379/0
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_LEVEL=debug
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M

volumes:
  woofedcrm_data:
    external: true
    name: woofedcrm_data

networks:
  $nome_rede_interna:
    external: true
    name: $nome_rede_interna
EOL

#SUBINDO STACK DO WOOFED
docker stack deploy --prune --resolve-image always -c woofedcrm.yaml woofedcrm #> /dev/null 2>&1

sleep 30
#MENSAGEM DE MIGRANDO BANCO DE DADOS (PASSOS)
echo -e "\e[97m• CONFIGURANDO E MIGRANDO BANCO DE DADOS \e[33m[5/6]\e[0m"
echo ""

#MIGRANDO BANCO DE DADOS DO WOOFED CRM
container_name="  woofedcrm_woofedcrm"

max_wait_time=1200

wait_interval=60

elapsed_time=0

while [ $elapsed_time -lt $max_wait_time ]; do
  CONTAINER_ID=$(docker ps -q --filter "name=$container_name")
  if [ -n "$CONTAINER_ID" ]; then
    break
  fi
  sleep $wait_interval
  elapsed_time=$((elapsed_time + wait_interval))
done

if [ -z "$CONTAINER_ID" ]; then
  echo "O contêiner não foi encontrado após $max_wait_time segundos."
  exit 1
fi

docker exec -it "$CONTAINER_ID" bundle exec rails db:create
docker exec -it "$CONTAINER_ID" bundle exec rails db:migrate
#docker exec -it "$CONTAINER_ID" bundle exec rails db:seed

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[6/6]\e[0m"
sleep 1
while true; do
    # Verifica se o serviço woofedcrm está ativo
    if docker service ls --filter "name=woofedcrm_woofedcrm" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[WOOFED CRM]\e[0m"
echo ""
echo -e "\e[97mDominio:\e[33m https://$url_woofed\e[0m"
echo ""
echo -e "\e[97mURL MOTOR:\e[33m https://$url_woofed/motor_admin\e[0m"
echo ""
echo -e "\e[97mUser MOTOR:\e[33m $email_admin_woofed\e[0m"
echo ""
echo -e "\e[97mSenha MOTOR:\e[33m $senha_email_woofed\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

ferramenta_formbricks() {

dados
clear
nome_formbricks
preencha_as_info

while true; do

echo -e "\e[97mPasso$amarelo 1/5\e[0m"
echo -en "\e[33mDigite o Dominio para o Formbricks (ex: formbricks.oriondesign.art.br): \e[0m" && read -r url_formbricks
echo ""

echo -e "\e[97mPasso$amarelo 2/5\e[0m"
echo -en "\e[33mDigite um Email para o SMTP (ex: contato@oriondesign.art.br): \e[0m" && read -r email_formbricks
echo ""

echo -e "\e[97mPasso$amarelo 3/5\e[0m"
echo -en "\e[33mDigite a Senha SMTP do email (Sem caracteres especiais: \!#$ | se estiver usando gmail use a senha de app): \e[0m" && read -r senha_formbricks
echo ""

echo -e "\e[97mPasso$amarelo 4/5\e[0m"
echo -en "\e[33mDigite o Host SMTP do email (ex: smtp.hostinger.com): \e[0m" && read -r host_formbricks
echo ""

echo -e "\e[97mPasso$amarelo 5/5\e[0m"
echo -en "\e[33mDigite a Porta SMTP do email (ex: 465): \e[0m" && read -r porta_formbricks
echo ""

if [ "$porta_formbricks" -eq 465 ] || [ "$porta_formbricks" -eq 25 ]; then
    ssl_formbricks=1
else
    ssl_formbricks=0
fi



clear
nome_formbricks
conferindo_as_info

echo -e "\e[33mDominio:\e[97m $url_formbricks\e[0m"
echo ""

echo -e "\e[33mEmail SMTP:\e[97m $email_formbricks\e[0m"
echo ""

echo -e "\e[33mSenha SMTP:\e[97m $senha_formbricks\e[0m"
echo ""

echo -e "\e[33mHost SMTP:\e[97m $host_formbricks\e[0m"
echo ""

echo -e "\e[33mPorta SMTP:\e[97m $porta_formbricks\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    instalando_msg
    break
else
    clear
    nome_formbricks
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO INSTALAÇÃO \e[33m[1/3]\e[0m"
echo ""
sleep 3

echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m"
echo ""

verificar_container_postgres
if [ $? -eq 0 ]; then
        sleep 1
        criar_banco_postgres_formbricks #> /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1

    else
        ferramenta_postgres > /dev/null 2>&1
        pegar_senha_postgres > /dev/null 2>&1
        criar_banco_postgres_formbricks #> /dev/null 2>&1
fi

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INSTALANDO FORMBRICKS \e[33m[2/3]\e[0m"
echo ""

encryption_key_form=$(openssl rand -hex 16)
next_key_form=$(openssl rand -hex 16)
cron_key_form=$(openssl rand -hex 16)

cat > formbricks.yaml <<-EOF
version: "3.7"

services:
  formbricks:
    image: formbricks/formbricks:latest
    networks:
      - $nome_rede_interna
    volumes:
      - formbricks_data:/home/nextjs/apps/web/uploads/
    environment:
      ## Url da aplicação ##
      - WEBAPP_URL=https://$url_formbricks
      - NEXTAUTH_URL=https://$url_formbricks

      ## Banco de dados Postgres ##
      - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/formbricks

      ## Licença Enterprise ou Self-hosting ##
      ## Solicitar licenta Self-hosting --> https://oriondesign.art.br/formbricks_licence/ <-- ##
      - ENTERPRISE_LICENSE_KEY=

      ## Keys aleatórias 32 caracteres ##
      - ENCRYPTION_KEY=$encryption_key_form
      - NEXTAUTH_SECRET=$next_key_form
      - CRON_SECRET=$cron_key_form

      ## Dados do SMTP ##
      - MAIL_FROM=$email_formbricks
      - SMTP_HOST=$host_formbricks
      - SMTP_PORT=$porta_formbricks
      - SMTP_SECURE_ENABLED=$ssl_formbricks #(0= false | 1= true)
      - SMTP_USER=$email_formbricks
      - SMTP_PASSWORD=$senha_formbricks

      ## Ativar/Desativar registros e convites (0= false | 1= true) ##
      - SIGNUP_DISABLED=0
      - INVITE_DISABLED=0
      - EMAIL_VERIFICATION_DISABLED=0
      - PASSWORD_RESET_DISABLED=0

      ## Dados do Formbricks (para pesquisa) ##
      - NEXT_PUBLIC_FORMBRICKS_API_HOST=
      - NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID=
      - NEXT_PUBLIC_FORMBRICKS_ONBOARDING_SURVEY_ID=

      ## Login Google Cloud ##
      - GOOGLE_AUTH_ENABLED=0
      - GOOGLE_CLIENT_ID=
      - GOOGLE_CLIENT_SECRET=

      ## Google Sheets ##
      - GOOGLE_SHEETS_CLIENT_ID=
      - GOOGLE_SHEETS_CLIENT_SECRET=
      - GOOGLE_SHEETS_REDIRECT_URL=

      ## Login Github ##
      - GITHUB_AUTH_ENABLED=0
      - GITHUB_ID=
      - GITHUB_SECRET=

      ## Login Github ##
      - NOTION_OAUTH_CLIENT_ID=
      - NOTION_OAUTH_CLIENT_SECRET=   
      
      ## Login Airtable ##
      - AIRTABLE_CLIENT_ID=

      ## Termos e politica de privacidade ##
      #- PRIVACY_URL=
      #- TERMS_URL=
      #- IMPRINT_URL=

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.formbricks.rule=Host(\`$url_formbricks\`)
        - traefik.http.services.formbricks.loadbalancer.server.port=3000
        - traefik.http.routers.formbricks.service=formbricks
        - traefik.http.routers.formbricks.tls.certresolver=letsencryptresolver
        - traefik.http.routers.formbricks.entrypoints=websecure
        - traefik.http.routers.formbricks.tls=true

networks:
  $nome_rede_interna:
    name: $nome_rede_interna
    external: true

volumes:
  formbricks_data:
    external: true
EOF

docker stack deploy --prune --resolve-image always -c formbricks.yaml formbricks > /dev/null 2>&1

#######################################################################
#VERIFICANDO SERVIÇO MENSAGEM
echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m"
echo -e "\e[97mEste passo podera demorar um pouco para terminar\e[0m"
sleep 1
while true; do
    # Verifica se o serviço FORMBRICKS está ativo
    if docker service ls --filter "name=formbricks" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
#######################################################################

#INSTALAÇÃO FINALIZADA
instalado_msg
guarde_os_dados_msg

echo -e "\e[32m[FORMBRICKS]\e[0m"
echo ""
echo -e "\e[33mDominio:\e[97m http://$url_formbricks\e[0m"
echo ""

creditos_msg

read -p "Deseja instalar outra aplicação? (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        cd
        cd
        clear
        exit 1
    fi

}

#########################

burlar_chatwoot(){
    while :; do
    if docker ps -q --filter "name=postgres" | grep -q .; then
        CONTAINER_ID=$(docker ps -q --filter "name=postgres")
        docker exec -i "$CONTAINER_ID" psql -U postgres -d chatwoot -c \
        "UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: enterprise\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN'; \
        UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: 200\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN_QUANTITY';"
        break
    else
        sleep 5
    fi
done
}
verificar_docker_e_portainer_traefik() {
    # Verificar se o Docker está instalado
    if ! command -v docker &> /dev/null; then
        clear
        erro_msg
        echo ""
        echo -e "Ops, parece que você não instalou a opção \e[32m[1] Traefik e Portainer${reset} ${branco}do nosso instalador.${reset}"
        echo "Instale antes de tentar instalar esta aplicação."

        echo ""
        echo "Voltando ao menu em 5 segundos."
        sleep 5

        nome_menu
        menu_instalador

        return 1
    fi

    # Verificar se o Portainer está instalado
    if ! docker ps -a --format "{{.Names}}" | grep -q "portainer"; then
        clear
        erro_msg
        echo ""
        echo -e "Ops, parece que você não instalou a opção \e[32m[1] Traefik e Portainer${reset} ${branco}do nosso instalador.${reset}"
        echo "Instale antes de tentar instalar esta aplicação."

        echo ""
        echo "Voltando ao menu em 5 segundos."
        sleep 5

        nome_menu
        menu_instalador

        return 1
    fi

    # Verificar se o Traefik está instalado
    if ! docker ps -a --format "{{.Names}}" | grep -q "traefik"; then
        clear
        erro_msg
        echo ""
        echo -e "Ops, parece que você não instalou a opção \e[32m[1] Traefik e Portainer${reset} ${branco}do nosso instalador.${reset}"
        echo "Instale antes de tentar instalar esta aplicação."

        echo ""
        echo "Voltando ao menu em 5 segundos."
        sleep 5

        nome_menu
        menu_instalador

        return 1
    fi

    return 0
}



#MENU

while true; do

    nome_menu
    menu_instalador

    read -p "Digite o NÚMERO da opção desejada: " opcao

    case $opcao in

        0)
            
            ferramenta_testeemail
            ;;
        1)
            ferramenta_traefik_e_portainer
            ;;
        2)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_chatwoot
            fi
            ;;
        3)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_chatwootARM
            fi
            ;;
        4)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_evolution
            fi
            ;;
        5)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_evolutionARM
            fi
            ;;
        6)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_minio
            fi
            ;;
        7)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_typebot
            fi
            ;;
        8)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_n8n
            fi
            ;;
        9)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_flowise
            fi
            ;;
        10)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_pgAdmin_4
            fi
            ;;
        11)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_nocobase
            fi
            ;;
        12)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_botpress
            fi
            ;;
        13)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_wordpress
            fi
            ;;
        14)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_baserow
            fi
            ;;
        15)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_mongodb
            fi
            ;;
        16)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_rabbitmq
            fi
            ;;
        17)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_uptimekuma
            fi
            ;;
        18)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_calcom
            fi
            ;;
        19)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_mautic
            fi
            ;;
        20)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_appsmith
            fi
            ;;
        21)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_qdrant
            fi
            ;;
        22)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_woofed
            fi
            ;;
        23)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_formbricks
            fi
            ;;
        24)
            if verificar_docker_e_portainer_traefik; then
            ferramenta_trocar_logos
            fi
            ;;
        25)
            ferramenta_remover_stack
            ;;
        26)
            echo "Saindo..."
            break
            ;;
        nulled)
            burlar_chatwoot
            ;;

        *)

            ;;
    esac
    echo ""
done
